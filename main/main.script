local monarch = require "monarch.monarch"
local defsave = require "defsave.defsave"

local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local pokemon = require "pokedex.pokemon"
local storage = require "pokedex.storage"
local profiles = require "pokedex.profiles"

local flow = require "utils.flow"


function init(self)
	msg.post("@render:", "clear_color", {color=vmath.vector4(0.46, 0.85, 1, 1)})

	--input order
	msg.post(".", "acquire_input_focus")
	msg.post("/screens", "acquire_input_focus")
	msg.post("/popups", "acquire_input_focus")
	
	msg.post("#", "show_first_screen")
	defos.set_window_size(0, 0, 570, 1024)
	defsave.appname = "pokedex5E"
	defsave.use_default_data = false
	profiles.init()
	flow.start(function()
		flow.until_true(function()
			return not profiles.is_new_game() and profiles.get_active()
		end)
		natures.init()
		pokedex.init()
		pokemon.init()
		storage.init()
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("show_first_screen") then
		monarch.show(hash("splash"), {}, {}, function()
			if profiles.is_new_game() then
				timer.delay(0.8, false, function() 
					monarch.show(hash("pick_name"))
				end)
			else
				monarch.show(hash("switcher"), { no_stack = true })
			end
		end)
	end
end

function update(self, dt)
	flow.update(dt)
end
	

function on_input(self, action_id, action)
	if action_id == hash("overdraw") and action.released then
		msg.post("@render:", "toggle_overdraw")
	end
end

function final(self)
	storage.save()
end