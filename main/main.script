local monarch = require "monarch.monarch"
local defsave = require "defsave.defsave"
local movedex = require "pokedex.moves"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local variants = require "pokedex.variants"
local dex = require "pokedex.dex"
local items = require "pokedex.items"
local feats = require "pokedex.feats"
local storage = require "pokedex.storage"
local profiles = require "pokedex.profiles"
local filters = require "pokedex.filters"
local trainer = require "pokedex.trainer"
local network = require "pokedex.network.network"
local flow = require "utils.flow"
local gui_colors = require "utils.gui_colors"
local notify = require "utils.notify"
local screeninfo = require "utils.screeninfo"
local log = require "utils.log"
local fakemon = require "fakemon.fakemon"
local settings = require "pokedex.settings"
local url = require "utils.url"
local version = require "screens.popups.version_dialog.version"
local backup = require "utils.backup"
local screens = require "utils.screens"
local messages = require "utils.messages"
local platform = require "utils.platform"

local function send_crash_on_start()
	crash.write_dump()
	local handle = crash.load_previous()
	if handle then
		gameanalytics.addErrorEvent {
			severity = "Error",
			message =  crash.get_extra_data(handle)
		}
		crash.release(handle)
	end
end

local error_table = {}
local VERSION = sys.get_config("project.version")
-- https://gameanalytics.com/docs/item/ga-data
-- https://gameanalytics.com/docs/item/resource-events

local function error_handler(source, message, traceback)
	-- don't flood the same unique message more than once
	local traceback_hash = hash(traceback)
	if error_table[traceback_hash] ~= nil then
		return false
	else
		error_table[traceback_hash] = true
	end

	local severity_rating = "Critical"
	if sys.get_engine_info().is_debug then
		severity_rating = "Debug"
	end
	local error_message = VERSION .. " - " .. source .. " - " .. message .. " - " .. traceback
	
	if gameanalytics then
		gameanalytics.addErrorEvent {
			severity = severity_rating,
			message = error_message
		}
	end
	log.critical(error_message)
end


local gameanalytics_keys = {
	["Windows"] = "gameanalytics.game_key_windows",
	["Android"] = "gameanalytics.game_key_android",
	["HTML5"] = "gameanalytics.game_key_html5",
	["iPhone OS"] = "gameanalytics.game_key_ios"
}

local function window_resized()
	msg.post("@render:", "window_event")
end

function init(self)
	collectionfactory.create("/menu#collectionfactory")
	msg.post(url.MENU, messages.HIDE)
	
	window.set_listener(window_resized)
	local ga_config = sys.get_config(gameanalytics_keys[platform.CURRENT])
	if not gameanalytics or ga_config == nil or ga_config == "" then
		gameanalytics = require "utils.mock_gameanalytics"
		log.info("Skipping GameAnalytics")
	else
		send_crash_on_start()
		sys.set_error_handler(error_handler)
	end

	log.outfile = sys.get_save_file("pokedex5E", "log")

	defsave.appname = "pokedex5E"
	defsave.verbose = false
	defsave.use_default_data = false
	
	if sys.get_engine_info().is_debug and share and debug.SHARE then
		backup.save_backup()
	end

	settings.load()
	msg.post("@render:", "clear_color", {color=gui_colors.BACKGROUND})
	
	--input order
	msg.post(".", "acquire_input_focus")
	msg.post("/screens", "acquire_input_focus")
	msg.post("/popups", "acquire_input_focus")
	msg.post("/debug", "acquire_input_focus")
	msg.post("/menu", "acquire_input_focus")
	
	if platform.WINDOWS or platform.MACOS then
		local project = vmath.vector3(720, 1280, 1)
		local pixel = vmath.vector3(1440, 2560, 0.3)
		local galaxya8 = vmath.vector3(1080, 2220, 0.45)
		local tab8 = vmath.vector3(800, 1280, 0.75)
		local square = vmath.vector3(800, 800, 1)
		local iphonex = vmath.vector3(1125, 2436, 0.4)
		local iphonese = vmath.vector3(640, 1136, 1)
		local umx = vmath.vector3(480, 854, 1)
		
		local using = project
		
		msg.post("@render:", "resize", { width = using.x*using.z, height = using.y*using.z } )
	end
	msg.post("#", messages.SHOW_SPLASH)
	
	flow.start(function()
		if platform.WEB then
			log.info("HTML5: Skipping LuaFileSystem")
		else
			require "utils.lfs_extend"
			fakemon.init()
			flow.until_true(function() return not fakemon.BUSY end)
		end
		movedex.init()
		natures.init()
		variants.init()
		pokedex.init()
		profiles.init()

		flow.delay(1) -- Extra timeout for loading screen
		flow.until_true( function() return not monarch.is_busy() end)

		trainer.load()
		storage.init()
		dex.init()
		items.init()
		filters.init()
		feats.init()
		network.init()

		if profiles.is_new_game() then 
			monarch.show(screens.PICK_NAME, nil, {sender=msg.url(), slot=1})
		elseif not profiles.get_active_slot() then
			msg.post("#", messages.SHOW_PROFILE)
		elseif #storage.list_of_ids_in_party() > 0 then
			msg.post("#", messages.SHOW_PARTY)
		elseif #storage.list_of_ids_in_pc() > 0 then
			msg.post("#", messages.SHOW_STORAGE)
		else
			-- We have an active slot but is has no pokemon. We don't currently support having
			-- no Pokemon (yet), so for now go to the profile screen
			msg.post("#", messages.SHOW_PROFILE)
		end

		local sysinfo = sys.get_sys_info()
		if platform.ANDROID then
			local up_to_date, versions_behind, _ = version.check_version()
			if not up_to_date and versions_behind then
				timer.delay(3, false, function()
					notify.notify("Pokedex5e is " ..versions_behind .. " versions behind!")
				end)
			end 
		end
	end)
end

function update(self, dt)
	network.update()
end

function on_message(self, message_id, message, sender)
	if message_id == messages.SHOW_PROFILE then
		monarch.show(screens.PROFILES)
	elseif message_id == messages.SHOW_PARTY then
		monarch.show(screens.PARTY)
	elseif message_id == messages.SHOW_SPLASH then
		monarch.show(screens.SPLASH)
	elseif message_id == messages.SHOW_STORAGE then
		monarch.show(screens.STORAGE)
	end
end


function final(self)
	if not debug.loaded_backup then
		network.save()
		storage.save()
		settings.save()
	end
	log.info("Clean Exit")
end
