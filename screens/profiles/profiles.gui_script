local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local trainer = require "pokedex.trainer"
local gui_colors = require "utils.gui_colors"
local url = require "utils.url"
local dex = require "pokedex.dex"
local gooey_scrolling_list = require "utils.gooey_scrolling_list"
local gooey = require "gooey.gooey"
local party = require "screens.party.party"
local seachbar = require "screens.profiles.searchbar"
local utils = require "utils.utils"
local screens = require "utils.screens"
local messages = require "utils.messages"
local network = require "pokedex.network.network"

local function delete(profile)
	profiles.delete(profile)
end

local ACTIVE = vmath.vector3(1)
local INACTIVE = vmath.vector3(0.96, 0.96, 0.96, 1)
local ACTIVE_SIZE = vmath.vector3(420, 105, 0)
local INACTIVE_SIZE = vmath.vector3(380, 105, 0)

local active_slot = 0

local function setup_pokemon_images(self, nodes, slot)
	for i=1, 6 do
		local img_node = nodes["profile_slot/pokemon" .. i]
		if self.all_slots[slot].party and self.all_slots[slot].party[i] then
			local pkmn_data = self.all_slots[slot].party[i]
			local pokemon_sprite, texture = pokedex.get_icon(pkmn_data.species, pkmn_data.variant)
			gui.set_texture(img_node, texture)
			if pokemon_sprite then
				gui.play_flipbook(img_node, pokemon_sprite)
			end
		else
			gui.set_enabled(img_node, false)
		end
	end
end


local function activate(slot)
	profiles.set_active(slot)
	local needs_save = storage.load(profiles.get_active())
	if needs_save then
		storage.save()
	end
	trainer.load(profiles.get_active())
	dex.load(profiles.get_active())
	network.load_profile(profiles.get_active())
	if #storage.list_of_ids_in_party() > 0 then
		monarch.show(screens.PARTY)
	else
		monarch.show(screens.ADD)
	end
	profiles.set_active_complete()
end


local i = 0
local function set_id(node)
	i = i + 1
	gui.set_id(node, "profile_" .. i)
	return "profile_" .. i
end

local function update_item(self, item)
	if next(self.all_slots) == nil then
		return
	end
	local name = item.nodes["profile_slot/trainer_name"]
	local stats = item.nodes["profile_slot/trainer_stats"]
	local delete = item.nodes["profile_slot/btn_delete"]
	local button = item.nodes["profile_slot/btn_slot"]
	gui.set_text(name, self.all_slots[item.data].name)
	gui.set_text(stats, " Own: " .. self.all_slots[item.data].caught - self.all_slots[item.data].released)

	setup_pokemon_images(self, item.nodes, item.data)
	gui.set_color(button, INACTIVE)
	gui.set_color(name, gui_colors.HERO_TEXT_FADED)
	gui.set_color(stats, gui_colors.HERO_TEXT_FADED)
	gui.set_size(item.nodes["profile_slot/btn_root"], INACTIVE_SIZE)
	if item.data == active_slot then
		gui.set_size(item.nodes["profile_slot/btn_root"], ACTIVE_SIZE)
		gui.set_color(item.nodes["profile_slot/btn_root"], ACTIVE)
		gui.set_color(item.nodes["profile_slot/trainer_name"], gui_colors.HERO_TEXT)
		gui.set_color(item.nodes["profile_slot/trainer_stats"], gui_colors.HERO_TEXT)
	end

end


local function delete_profile(self, slot)
	profiles.delete(slot)
	gui.set_text(self.seach_text, "")
	self.scrolling_data = {}

	for index, _ in pairs(self.all_slots) do
		table.insert(self.scrolling_data, index)
	end
	self.filtered_list = utils.deep_copy(self.scrolling_data)
	self.scrolling_list.refresh(self.filtered_list)
end

local function profile_list_clicked(list)
	for key, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			local value = entry.data
			if value then
				if gui.pick_node(entry.nodes["profile_slot/btn_slot"], list.action_pos.x, list.action_pos.y) then
					activate(value)
				elseif gui.pick_node(entry.nodes["profile_slot/btn_delete"], list.action_pos.x, list.action_pos.y) then
					monarch.show(screens.ARE_YOU_SURE, nil, {sender=msg.url(), data=value, title="Delete Profile"})
				end
			end
		end
	end
end

function init(self)
	button.acquire()
	url.PROFILES = msg.url()
	self.scrolling_data = {}
	msg.post(url.MENU, messages.HIDE)
	self.seach_text = gui.get_node("search_text")
	self.seach_background = gui.get_node("search_backing")
	gui.set_enabled(self.seach_background, false)
	active_slot = profiles.get_active_slot()
	self.all_slots = profiles.get_all_profiles()

	for index, _ in pairs(self.all_slots) do
		table.insert(self.scrolling_data, index)
	end
	
	self.filtered_list = utils.deep_copy(self.scrolling_data)

	self.scrolling_list = gooey_scrolling_list.create_vertical_dynamic("profile_list", "scroll", "profile_slot/btn_root", "scrollbar/handle", "scrollbar/bar", "scrollbar/visual", function(list, item) update_item(self, item) end, profile_list_clicked)
	self.scrolling_list.refresh(self.filtered_list)
	
end


function on_message(self, message_id, message, sender)
	if message_id == messages.RESPONSE then
		if message.response then
			delete_profile(self, message.data)
		end
	elseif message_id == messages.SEARCH then
		self.scrolling_list.refresh(self.filtered_list)
	end
end


function final(self)
	button.unregister()
	profile_nodes = {}
	self.filtered_list = {}
	self.scrolling_data = {}
end

function on_input(self, action_id, action)
	seachbar.on_input(self, action_id, action)
	if next(self.filtered_list) ~= nil then
		self.scrolling_list.on_input(self.filtered_list, action_id, action)
	end
	gooey.button("new_profile", action_id, action, function()
		monarch.show(screens.PICK_NAME, nil, {sender=msg.url(), slot=#self.all_slots+1})
	end)
	if profiles.get_active_slot() == nil then
		return true
	end
end
