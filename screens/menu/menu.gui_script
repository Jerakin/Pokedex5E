local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local url = require "utils.url"
local gro = require "utils.gui_render_order"
local party = require "screens.party.party"
local _pokemon = require "pokedex.pokemon"
local storage = require "pokedex.storage"
local gooey = require "gooey.gooey"
local gooey_buttons = require "utils.gooey_buttons"
local tracking_id = require "utils.tracking_id"
local share = require "pokedex.share"

local map = {
	[hash("party")] = "btn_party",
	[hash("storage")] = "btn_storage",
	[hash("encounters")] = "btn_encounters",
	[hash("add")] = "btn_add",
	[hash("profiles")] = "btn_profiles",
	[hash("about")] = "btn_about",
	[hash("debug")] = "btn_debug",
	[hash("generate_pokemon")] = "btn_generate",
	[hash("import")] = "btn_import",
	[hash("pokedex")] = "btn_pokedex",
	[hash("settings")] = "btn_settings",
	[hash("trainer")] = "btn_trainer",
}

local function hide(self)
	gui.set_enabled(gui.get_node("root"), false)
end

local function show(self)
	button.acquire()
	gui.set_enabled(gui.get_node("root"), true)
end

local function toggle(self)
	local active = monarch.top()
	for scene, id in pairs(map) do
		if active == scene then
			gui.set_color(gui.get_node(id), vmath.vector4(1))
			gui.play_flipbook(gui.get_node(id), "gradient")
		else
			gui.set_color(gui.get_node(id), vmath.vector4(0.192, 0.192, 0.192, 1))
			gui.play_flipbook(gui.get_node(id), "square")
		end
	end
	button.acquire()
	self.block_input = true
	self.toggle = not self.toggle
	gui.set_enabled(self.menu, self.toggle)
	if not self.toggle then
		timer.delay(0.1, false, function() self.block_input = false end)
	end

	if not self.toggle then
		gui.set_enabled(self.btn_menu, true)
	else
		gui.set_enabled(self.btn_menu, false)
	end
end


function init(self)
	button.acquire()
	gui.set_render_order(gro.MENU)
	url.MENU = msg.url()
	self.toggle = false
	self.block_input = false
	self.btn_party = gui.get_node("btn_party")
	self.btn_storage = gui.get_node("btn_storage")
	self.btn_encounters = gui.get_node("btn_encounters")
	self.btn_profiles = gui.get_node("btn_profiles")
	self.btn_about = gui.get_node("btn_about")
	self.btn_menu = gui.get_node("btn_menu")
	self.btn_generate = gui.get_node("btn_generate")
	self.btn_debug = gui.get_node("btn_debug")
	self.menu = gui.get_node("menu")
	self.btn_import = gui.get_node("btn_import")
	self.btn_trainer = gui.get_node("btn_trainer")
	gui.set_enabled(self.menu, false)
	if not clipboard then
		gui.set_enabled(self.btn_import, false)
	end
		local name = profiles.get_active_slot() ~= nil and profiles.get_active_name() or "Someone"
		gui.set_text(self.btn_storage, name .. "'s PC")

	
	button.register(self.btn_party, function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:PartyByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("party")
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_storage, function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:PCByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("storage")
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_about , function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:AboutByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("about")
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_generate , function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:GenerateByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("generate_pokemon")
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_encounters, function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:EncountersByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("encounters")
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_profiles, function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:ProfilesByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("profiles")
		toggle(self)
	end, {no_shake=true})

	button.register("btn_add", function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:AddByMenu",
			value = tracking_id[monarch.top()]
		}
		monarch.show("add")
		toggle(self)
	end, {no_shake=true})
	
	button.register("btn_import", function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Import",
			value = tracking_id[monarch.top()]
		}
		monarch.show("import")
		toggle(self)
	end, {no_shake=true})

	button.register("btn_pokedex", function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Pokedex",
			value = tracking_id[monarch.top()]
		}
		monarch.show("pokedex")
		toggle(self)
	end, {no_shake=true})

	button.register("btn_settings", function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Settings",
			value = tracking_id[monarch.top()]
		}
		monarch.show("settings")
		toggle(self)
	end, {no_shake=true})

	button.register("btn_trainer", function()
		gameanalytics.addDesignEvent {
			eventId = "Navigation:Trainer",
			value = tracking_id[monarch.top()]
		}
		monarch.show("trainer")
		toggle(self)
	end, {no_shake=true})
	
	if sys.get_engine_info().is_debug then
		button.register("btn_debug", function()
			monarch.show("debug")
			toggle(self)
		end, {no_shake=true})
	else
		gui.set_enabled(self.btn_debug, false)
	end
end

function final(self)
	button.unregister()
end

function on_input(self, action_id, action)
	local b = button.on_input(action_id, action)
	local g = gooey.button("btn_menu", action_id, action, function()
		toggle(self)
	end, gooey_buttons.menu_button)
	
	if b or g.over_now then return self.toggle end

	if self.toggle and not b and gui.pick_node(gui.get_node("menu"), action.x, action.y) and action_id == hash("touch") and action.pressed then
		toggle(self)
		return true
	end
	return self.block_input
end

function on_message(self, message_id, message)
	if message_id == hash("show") then
		local name = profiles.get_active_name() or "Someone"
		gui.set_text(self.btn_storage, name .. "'s PC")
		show(self)
	elseif message_id == hash("hide") then
		hide(self)
	end
end

