local button = require "utils.button"
local monarch = require "monarch.monarch"
local profiles = require "pokedex.profiles"
local url = require "utils.url"
local gro = require "utils.gui_render_order"
local party = require "screens.party.party"
local _pokemon = require "pokedex.pokemon"
local storage = require "pokedex.storage"
local gooey = require "gooey.gooey"
local gooey_buttons = require "utils.gooey_buttons"
local share = require "pokedex.share"
local screens = require "utils.screens"
local messages = require "utils.messages"
local netcore = require "pokedex.network.netcore"
local broadcast = require "utils.broadcast"
local _share = require "pokedex.share"

local map = {
	[screens.PARTY] = "btn_party",
	[screens.STORAGE] = "btn_storage",
	[screens.ADD] = "btn_add",
	[screens.PROFILES] = "btn_profiles",
	[screens.ABOUT] = "btn_about",
	[screens.DEBUG] = "btn_debug",
	[screens.GENERATE_POKEMON] = "btn_generate",
	[screens.RECEIVE] = "btn_receive",
	[screens.POKEDEX] = "btn_pokedex",
	[screens.SETTINGS] = "btn_settings",
	[screens.TRAINER] = "btn_trainer",
	[screens.NETWORK_CONNECT] = "btn_connect",
}

local function hide(self)
	gui.set_enabled(gui.get_node("root"), false)
end

local function show(self)
	button.acquire()
	gui.set_enabled(gui.get_node("root"), true)
end

local function toggle(self)
	local active = monarch.top()
	for scene, id in pairs(map) do
		if active == scene then
			gui.set_color(gui.get_node(id), vmath.vector4(1))
			gui.play_flipbook(gui.get_node(id), "gradient")
		else
			gui.set_color(gui.get_node(id), vmath.vector4(0.192, 0.192, 0.192, 1))
			gui.play_flipbook(gui.get_node(id), "square")
		end
	end
	button.acquire()
	self.block_input = true
	self.toggle = not self.toggle
	gui.set_enabled(self.menu, self.toggle)
	if not self.toggle then
		timer.delay(0.1, false, function() self.block_input = false end)
	end

	if not self.toggle then
		gui.set_enabled(self.btn_menu, true)
	else
		gui.set_enabled(self.btn_menu, false)
	end
end

local function redraw_connected()
	gui.set_enabled(gui.get_node("icon_connected"), netcore.is_connected())
end


function init(self)
	button.acquire()
	gui.set_render_order(gro.MENU)
	url.MENU = msg.url()
	self.toggle = false
	self.block_input = false
	self.btn_party = gui.get_node("btn_party")
	self.btn_storage = gui.get_node("btn_storage")
	self.btn_profiles = gui.get_node("btn_profiles")
	self.btn_about = gui.get_node("btn_about")
	self.btn_menu = gui.get_node("btn_menu")
	self.btn_generate = gui.get_node("btn_generate")
	self.btn_debug = gui.get_node("btn_debug")
	self.menu = gui.get_node("menu")
	self.btn_receive = gui.get_node("btn_receive")
	self.btn_trainer = gui.get_node("btn_trainer")
	self.btn_connect = gui.get_node("btn_connect")
	gui.set_enabled(self.menu, false)

	if not _share.ENABLED.ANY then
		gui.set_enabled(self.btn_receive, false)
	end
	
	if not _share.ENABLED.NETWORK then
		gui.set_enabled(self.btn_connect, false)
	end
	
	local name = profiles.get_active_slot() ~= nil and profiles.get_active_name() or "Someone"
	gui.set_text(self.btn_storage, name .. "'s PC")

	
	button.register(self.btn_party, function()
		monarch.show(screens.PARTY)
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_storage, function()
		monarch.show(screens.STORAGE)
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_about , function()
		monarch.show(screens.ABOUT)
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_generate , function()
		monarch.show(screens.GENERATE_POKEMON)
		toggle(self)
	end, {no_shake=true})

	button.register(self.btn_profiles, function()
		monarch.show(screens.PROFILES)
		toggle(self)
	end, {no_shake=true})

	button.register("btn_add", function()
		monarch.show(screens.ADD)
		toggle(self)
	end, {no_shake=true})
	
	button.register("btn_receive", function()
		monarch.show(screens.RECEIVE)
		toggle(self)
	end, {no_shake=true})

	button.register("btn_pokedex", function()
		monarch.show(screens.POKEDEX)
		toggle(self)
	end, {no_shake=true})

	button.register("btn_settings", function()
		monarch.show(screens.SETTINGS)
		toggle(self)
	end, {no_shake=true})

	button.register("btn_trainer", function()
		monarch.show(screens.TRAINER)
		toggle(self)
	end, {no_shake=true})

	button.register("btn_connect", function()
		monarch.show(screens.NETWORK_CONNECT)
		toggle(self)
	end, {no_shake=true})
	
	if sys.get_engine_info().is_debug then
		button.register("btn_debug", function()
			monarch.show(screens.DEBUG)
			toggle(self)
		end, {no_shake=true})
	else
		gui.set_enabled(self.btn_debug, false)
	end

	redraw_connected()

	broadcast.register(netcore.MSG_STATE_CHANGED)
end

function final(self)
	button.unregister()
	broadcast.unregister(netcore.MSG_STATE_CHANGED)
end

function on_input(self, action_id, action)
	local b = button.on_input(action_id, action)
	local g = gooey.button("btn_menu", action_id, action, function()
		toggle(self)
	end, gooey_buttons.menu_button)
	
	if b or g.over_now then return self.toggle end

	if self.toggle and not b and gui.pick_node(gui.get_node("menu"), action.x, action.y) and action_id == messages.TOUCH and action.pressed then
		toggle(self)
		return true
	end
	return self.block_input
end

function on_message(self, message_id, message)
	if message_id == messages.SHOW then
		local name = profiles.get_active_name() or "Someone"
		gui.set_text(self.btn_storage, name .. "'s PC")
		show(self)
	elseif message_id == messages.HIDE then
		hide(self)
	elseif message_id == netcore.MSG_STATE_CHANGED then
		redraw_connected()
	end
end

