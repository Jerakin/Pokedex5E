local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local profiles = require "pokedex.profiles"
local storage = require "pokedex.storage"
local trainer = require "pokedex.trainer"
local gro = require "utils.gui_render_order"
local url = require "utils.url"
local gooey_buttons = require "utils.gooey_buttons"
local dex = require "pokedex.dex"
local screens = require "utils.screens"
local messages = require "utils.messages"
local network = require "pokedex.network.network"

local slot


local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		local input_name = "ENTER NAME"
		local existing_profile = profiles.get_slot(slot)
		if existing_profile ~= nil then
			input_name = existing_profile.name
		end
		gui.set_text(input.node, input_name)
	end

	local cursor = gui.get_node("cursor")
	if input.selected then
		if input.empty then
			gui.set_text(input.node, "")
		end
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width*0.5, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(0,0,0,1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
end

function init(self)
	msg.post(url.MENU, messages.HIDE)
	gui.set_render_order(gro.POPUP)
	self.sender = monarch.data("pick_name") and monarch.data("pick_name").sender or nil
	slot = monarch.data("pick_name") and monarch.data("pick_name").slot or nil
	gui.set_enabled(gui.get_node("cursor"), false)

	if slot ~= nil then
		local existing_profile = profiles.get_slot(slot)
		if existing_profile ~= nil then
			gui.set_text(gui.get_node("name_text"), existing_profile.name)
		end
	end

	-- If there are no profiles, or there is just 1 and it's us, then you can't go back
	local can_go_back = true
	if #profiles.get_all_profiles() == 0 then
		can_go_back = false
	elseif #profiles.get_all_profiles() == 1 and profiles.get_slot(slot) ~= nil then
		can_go_back = false
	end
	if not can_go_back then
		gui.set_enabled(gui.get_node("btn_cancel"), false)
		gui.set_position(gui.get_node("btn_okay"), vmath.vector3(0,-148,0))
	end
end


local function okay()
	local name = gui.get_text(gui.get_node("name_text"))
	if name ~= "ENTER NAME" then
		local profile = profiles.get_slot(slot)
		if profile == nil then
			profile = profiles.add(name, slot)
		else
			profiles.update(slot, { name = name })
		end
		profiles.set_active(profile.slot)
		network.load_profile(profiles.get_active())
		local needs_save = storage.load(profiles.get_active())
		if needs_save then
			storage.save()
		end
		trainer.load(profiles.get_active())
		dex.load(profiles.get_active())
		storage.set_max_party_pokemon(3) -- default value for new profiles
		profiles.set_active_complete()
		monarch.show(screens.ADD)
	end
end

local function cancel()
	local existing_profile = profiles.get_slot(slot)
	if existing_profile ~= nil then
		profiles.delete(slot)
	end
	monarch.back()
end

function on_input(self, action_id, action)
	gooey.input("name_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, {max_length = 10, allowed_characters="[%a%d]", use_marked_text=false}, function(input)
		refresh_input(self, input, "name_text")
	end)
	gooey.button("btn_okay", action_id, action, okay, function(b) gooey_buttons.common_button(b, gui.get_node("btn_text")) end)
	gooey.button("btn_cancel", action_id, action, cancel, function(b) gooey_buttons.common_button(b, gui.get_node("btn_text1")) end)
	return true
end
