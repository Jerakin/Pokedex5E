local monarch = require "monarch.monarch"
local gro = require "utils.gui_render_order"
local _pokemon = require "pokedex.pokemon"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local url = require "utils.url"
local gui_utils = require "utils.gui"
local status_effects = require "screens.party.components.status_effects"
local storage = require "pokedex.storage"
local statuses = require "pokedex.statuses"
local messages = require "utils.messages"

local pokemon_id

function init(self)
	gui.set_render_order(gro.POPUP)
	msg.post(url.MENU, messages.HIDE)
	self.lock = true
	timer.delay(0.1, false, function() self.lock = false end)
	data = monarch.data("status_effects")
	pokemon_id = data.pokemon_id
	local pkmn = storage.get_pokemon(pokemon_id)
	local status = _pokemon.get_status_effects(pkmn)
	gui.play_flipbook(gui.get_node("poisoned"), status[statuses.status.POISONED] and statuses.status_images[statuses.status.POISONED] .. "_down" or statuses.status_images[statuses.status.POISONED] .. "_up")
	gui.play_flipbook(gui.get_node("frozen"), status[statuses.status.FROZEN] and statuses.status_images[statuses.status.FROZEN] .. "_down" or statuses.status_images[statuses.status.FROZEN] .. "_up")
	gui.play_flipbook(gui.get_node("paralyzed"), status[statuses.status.PARALYZED] and statuses.status_images[statuses.status.PARALYZED] .. "_down" or statuses.status_images[statuses.status.PARALYZED] .. "_up")
	gui.play_flipbook(gui.get_node("burning"), status[statuses.status.BURNING] and statuses.status_images[statuses.status.BURNING] .. "_down" or statuses.status_images[statuses.status.BURNING] .. "_up")
	gui.play_flipbook(gui.get_node("asleep"), status[statuses.status.ASLEEP] and statuses.status_images[statuses.status.ASLEEP] .. "_down" or statuses.status_images[statuses.status.ASLEEP] .. "_up")
	gui.play_flipbook(gui.get_node("confused"), status[statuses.status.CONFUSED] and statuses.status_images[statuses.status.CONFUSED] .. "_down" or statuses.status_images[statuses.status.CONFUSED] .. "_up")
	
	gooey.checkbox("poisoned").set_checked(status[statuses.status.POISONED] or false)
	gooey.checkbox("frozen").set_checked(status[statuses.status.FROZEN] or false)
	gooey.checkbox("paralyzed").set_checked(status[statuses.status.PARALYZED] or false)
	gooey.checkbox("burning").set_checked(status[statuses.status.BURNING] or false)
	gooey.checkbox("asleep").set_checked(status[statuses.status.ASLEEP] or false)
	gooey.checkbox("confused").set_checked(status[statuses.status.CONFUSED] or false)
	self.scroll_area = gui.get_node("scrolling_area")
	self.scroll_node = gui.get_node("scrolling_root")
	self.scroll_stop = gui.get_node("__scroll_stop")
	self.start = vmath.vector3()
	self.is_scrolling = false
	self.scroll_position = gui.get_position(self.scroll_node)
end

local function close()
	msg.post(url.MENU, messages.SHOW)
	monarch.back()
end

local function on_checked(checkbox, status)
	local pkmn = storage.get_pokemon(pokemon_id)
	local statuses = _pokemon.get_status_effects(pkmn) 
	_pokemon.set_status_effect(pkmn, status, not statuses[status])
	storage.save()
	msg.post(url.PARTY, messages.REFRESH_STATUS)
end

local function update_checkbox(checkbox, _status)
	local pkmn = storage.get_pokemon(pokemon_id)
	local status = _pokemon.get_status_effects(pkmn)
	gui.play_flipbook(checkbox.node, status[_status] and statuses.status_images[_status] .. "_down" or statuses.status_images[_status] .. "_up")
end

function on_input(self, action_id, action)
	if self.lock then
		return
	end
	local close_button = gooey.button("btn_close", action_id, action, close)
	if close_button.consumed then
		return
	end
	if action.pressed then
		self.start.x = action.x
		self.start.y = action.y
	end
	if action_id == messages.TOUCH and gui.pick_node(self.scroll_area, action.x, action.y) and math.abs(self.start.y - action.y) > 10 then
		self.is_scrolling = true
		if action.dy < 0 or gui.get_screen_position(self.scroll_stop).y < 0 then
			self.scroll_position.y = math.max(self.scroll_position.y + action.dy, 0)
			gui.set_position(self.scroll_node, self.scroll_position)
		end
	end
	
	if not self.is_scrolling then
		local checkbox_group = gooey.group("checkbox", function()
			gooey.checkbox("poisoned", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.POISONED) end, function(c) update_checkbox(c, statuses.status.POISONED) end)
			gooey.checkbox("frozen", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.FROZEN) end, function(c) update_checkbox(c, statuses.status.FROZEN) end)
			gooey.checkbox("paralyzed", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.PARALYZED) end, function(c) update_checkbox(c, statuses.status.PARALYZED) end)
			gooey.checkbox("burning", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.BURNING) end, function(c) update_checkbox(c, statuses.status.BURNING) end)
			gooey.checkbox("asleep", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.ASLEEP) end, function(c) update_checkbox(c, statuses.status.ASLEEP) end)
			gooey.checkbox("confused", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.CONFUSED) end, function(c) update_checkbox(c, statuses.status.CONFUSED) end)
		end)
		
		if not checkbox_group.consumed and gui.pick_node(self.scroll_area, action.x, action.y) then
			gooey.button("status_poisoned/box", action_id, action, function(b) on_checked(b, statuses.status.POISONED) end, function(c) update_checkbox(gooey.checkbox("poisoned"), statuses.status.POISONED) end)
			gooey.button("status_frozen/box", action_id, action, function(b) on_checked(b, statuses.status.FROZEN) end, function(c) update_checkbox(gooey.checkbox("frozen"), statuses.status.FROZEN) end)
			gooey.button("status_paralyzed/box", action_id, action, function(b) on_checked(b, statuses.status.PARALYZED) end, function(c) update_checkbox(gooey.checkbox("paralyzed"), statuses.status.PARALYZED) end)
			gooey.button("status_burned/box", action_id, action, function(b) on_checked(b, statuses.status.BURNING) end, function(c) update_checkbox(gooey.checkbox("burning"), statuses.status.BURNING) end)
			gooey.button("status_asleep/box", action_id, action, function(b) on_checked(b, statuses.status.ASLEEP) end, function(c) update_checkbox(gooey.checkbox("asleep"), statuses.status.ASLEEP) end)
			gooey.button("status_confused/box", action_id, action, function(b) on_checked(b, statuses.status.CONFUSED) end, function(c) update_checkbox(gooey.checkbox("confused"), statuses.status.CONFUSED) end)
		end
	
		gooey.button("btn_reset", action_id, action, function()
			local pkmn = storage.get_pokemon(pokemon_id)
			local status = _pokemon.get_status_effects(pkmn)
			for s, _ in pairs(status) do
				_pokemon.set_status_effect(pkmn, s, false)
				storage.save()
			end
			gooey.checkbox("poisoned").set_checked(false)
			gooey.checkbox("frozen").set_checked(false)
			gooey.checkbox("paralyzed").set_checked(false)
			gooey.checkbox("burning").set_checked(false)
			gooey.checkbox("asleep").set_checked(false)
			gooey.checkbox("confused").set_checked(false)
			update_checkbox(gooey.checkbox("poisoned"), statuses.status.POISONED)
			update_checkbox(gooey.checkbox("frozen"), statuses.status.FROZEN)
			update_checkbox(gooey.checkbox("paralyzed"), statuses.status.PARALYZED)
			update_checkbox(gooey.checkbox("burning"), statuses.status.BURNING)
			update_checkbox(gooey.checkbox("asleep"), statuses.status.ASLEEP)
			update_checkbox(gooey.checkbox("confused"), statuses.status.CONFUSED)

			msg.post(url.PARTY, messages.REFRESH_STATUS)
		end)
	end
	if action.released then
		self.is_scrolling = false
	end
	
end
