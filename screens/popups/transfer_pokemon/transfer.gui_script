local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local _pokemon = require "pokedex.pokemon"
local pokedex = require "pokedex.pokedex"
local inventory = require "screens.storage.inventory"
local gro = require "utils.gui_render_order"
local url = require "utils.url"
local gui_colors = require "utils.gui_colors"
local flow = require "utils.flow"
local movedex = require "pokedex.moves"
local inventory_buttons = {}
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local notify = require "utils.notify"
local tracking_id = require "utils.tracking_id"
local gui_utils = require "utils.gui"
local share = require "pokedex.share"

-- Because the "swap pokemon" popup isn't actually its own screen, it doesn't re-init and reset positions of everything
-- every time it shows up. Therefore, I can't dynamically adjust things for it each time, I need to store their initial values
local y_size_swap_bg
local y_pos_tutorial

local function join_table(title, T, sep)
	if T then
		return title .. table.concat(T, sep)
	end
	return title
end

local function back()
	gameanalytics.addDesignEvent {
		eventId = "Navigation:Back",
		value = tracking_id[monarch.top()]
	}
	monarch.back()
end

local function update_storage()
	msg.post(url.STORAGE, "inventory_updated")
	msg.post(url.STORAGE, "storage_updated")
end


local function set_pokemon_sprite(sprite, pokemon)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon)
	gui.set_texture(sprite, texture)
	if pokemon_sprite then
		gui.play_flipbook(sprite, pokemon_sprite)
	end
end

local function update_hp_meter(max, current)
	local max_size = gui.get_size(gui.get_node("hp_bar_bg"))
	local percent = current/max
	local size = gui.get_size(gui.get_node("hp_bar_bg1"))

	size.x = math.min(percent * max_size.x, max_size.x)
	gui.set_size(gui.get_node("hp_bar_bg1"), size)
end

local function inventory_button(self, node, id, swap)
	return button.register(node, function()
		if not id or not swap then
			return
		end
		storage.swap(swap, id)
		local other_pokemon = storage.get_copy(id)
		local other_nickname = _pokemon.get_nickname(other_pokemon)
		local other_species = _pokemon.get_current_species(other_pokemon)
		other_nickname = other_nickname or other_species:upper()
		notify.notify(self.nickname .. " MOVED TO PARTY\n" .. other_nickname .. " MOVED TO PC")
		update_storage()
		back()
	end)
end


local function setup_inventory(self)
	local inventory = storage.list_of_ids_in_inventory()

	
	local has_second_row = false
	for i=1, 6 do
		local row = math.ceil(i/3)
		local p = math.fmod(i-1, 3) + 1

		local pokemon
		if i <= #inventory then
			pokemon = storage.get_copy(inventory[i])
		end
		local sprite = gui.get_node("row" .. row .."/pokemon" .. p .. "/pokemon_sprite")
		local text = gui.get_node("row" .. row .."/pokemon" .. p .. "/txt_pokemon")
		local held_item = gui.get_node("row" .. row .."/pokemon" .. p .. "/held_item")
		local background = gui.get_node("row" .. row .. "/pokemon" .. p .. "/background")
		if pokemon then
			gui.set_text(text, _pokemon.get_current_species(pokemon):upper() .. "\nLv. " .. _pokemon.get_current_level(pokemon))
			gui.set_enabled(held_item, _pokemon.get_held_item(pokemon) ~= nil)
			gui.set_enabled(sprite, true)
			set_pokemon_sprite(sprite, pokemon)
			table.insert(inventory_buttons, inventory_button(self, sprite, inventory[i], self.pokemon_id))

			if (row == 2) then
				has_second_row = true
			end
		else
			gui.set_enabled(background, false)
		end
	end

	local node_tutorial_bg = gui.get_node("max_active_pokemon_tutorial")
	
	-- Shrink background if they have few enough PokÃ©mon shown to not need 2 rows
	if not has_second_row then
		local shift_amount = 170
		-- NOTE: values were stored during init because the GUI doesn't get reset when this "popup" reopens - it's just enabled/disabled
		local node_swap_bg = gui.get_node("swap_background")
		local size_swap_bg = gui.get_size(node_swap_bg)
		size_swap_bg.y = y_size_swap_bg - shift_amount 
		gui.set_size(node_swap_bg, size_swap_bg)

		local tutorial_pos = gui.get_position(node_tutorial_bg)
		tutorial_pos.y = y_pos_tutorial + shift_amount
		gui.set_position(node_tutorial_bg, tutorial_pos)
	end

	-- Hide the "you can increase your max slots" text if user is already at max
	local _, max_slots_range_max = storage.get_max_active_pokemon_range()
	local max_slots = storage.get_max_active_pokemon()
	if max_slots >= max_slots_range_max then
		gui.set_enabled(node_tutorial_bg, false)
	end
end

local function setup_move(pokemon, name, index)
	local move_name = gui.get_node("move_" .. index .. "/name")
	local move_icon = gui.get_node("move_" .. index .. "/element")
	local pp_lbl = gui.get_node("move_" .. index .. "/lbl_pp")
	local pp_current = gui.get_node("move_" .. index .. "/txt_pp_current")
	local pp_max = gui.get_node("move_" .. index .. "/txt_pp_max")
	gui.set_enabled(gui.get_node("move_" .. index .. "/root"), true)
	local current = _pokemon.get_move_pp(pokemon, name)
	if type(current) == "number" then
		local max = _pokemon.get_move_pp_max(pokemon, name)
		gui.set_text(pp_current, current)
		gui.set_text(pp_max, "/" .. max)
		local p = gui.get_position(pp_current)
		p.x = p.x + gui.get_text_metrics_from_node(pp_current).width
		gui.set_position(pp_max, p)
		if current == 0 then
			gui.set_color(pp_current, gui_colors.RED)
			gui.set_color(pp_max, gui_colors.RED)
			gui.set_color(pp_lbl, gui_colors.RED)
		elseif current < max then
			gui.set_color(pp_current, gui_colors.RED)
			gui.set_color(pp_max, gui_colors.GREEN)
			gui.set_color(pp_lbl, gui_colors.GREEN)
		else
			gui.set_color(pp_current, gui_colors.GREEN)
			gui.set_color(pp_max, gui_colors.GREEN)
			gui.set_color(pp_lbl, gui_colors.GREEN)
		end
	else
		gui.set_text(pp_current, string.sub(current, 1, 5) .. ".")
		gui.set_text(pp_max, "")
	end
	gui.set_text(move_name, name:upper())
	gui.set_color(move_name, movedex.get_move_color(name))
	gui.play_flipbook(move_icon, movedex.get_move_icon(name))
end

local function setup_info(self)
	local pokemon = storage.get_copy(self.pokemon_id)
	local pokemon_sprite, texture = _pokemon.get_sprite(pokemon)
	gui.set_texture(gui.get_node("pokemon_sprite"), texture)
	if pokemon_sprite then
		gui.play_flipbook(gui.get_node("pokemon_sprite"), pokemon_sprite)
	end
	gui.set_text(gui.get_node("txt_lvl"), "Lv. " .. _pokemon.get_current_level(pokemon))
	gui.set_text(gui.get_node("txt_ac"), "AC: " .. _pokemon.get_AC(pokemon))

	local item = _pokemon.get_held_item(pokemon)
	local holding = item and "HOLDING: " .. item:upper() or "NO ITEM"
	gui.set_text(gui.get_node("txt_held_item"), holding)
	
	local c = _pokemon.get_current_hp(pokemon)
	local m = _pokemon.get_total_max_hp(pokemon)
	gui.set_text(gui.get_node("txt_hp"), "HP: " .. c .. "/" .. m)
	update_hp_meter(m, c)
	
	self.nickname = _pokemon.get_nickname(pokemon)
	local species = _pokemon.get_current_species(pokemon):upper()
	if self.nickname then
		gui.set_text(gui.get_node("txt_index"), string.format("#%03d", _pokemon.get_index_number(pokemon)) .. " " .. species)
	else
		gui.set_text(gui.get_node("txt_index"), string.format("#%03d", _pokemon.get_index_number(pokemon)))
	end
	self.nickname = self.nickname or species
	gui.set_text(gui.get_node("txt_species"), self.nickname)
	gui_utils.scale_text_to_fit_size(gui.get_node("txt_species"))
	
	local vul = gui.get_node("vulnerabilities")
	local imm = gui.get_node("immunities")
	local res = gui.get_node("resistances")
	gui.set_text(vul, join_table("Vulnerabilities: ", _pokemon.get_vulnerabilities(pokemon), ", "))
	gui.set_text(res, join_table("Resistances: ", _pokemon.get_resistances(pokemon), ", "))
	gui.set_text(imm, join_table("Immunities: ", _pokemon.get_immunities(pokemon), ", "))

	local speed, stype = _pokemon.get_speed_of_type(pokemon)
	gui.set_text(gui.get_node("txt_speed"), stype .. ": " .. speed)
	
	local index = 0
	local moves_string = ""
	local pp_string = ""
	for i=1, 4 do
		gui.set_enabled(gui.get_node("move_" .. i .. "/root"), false)
	end
	for move, data in pairs(_pokemon.get_moves(pokemon)) do
		index = index + 1
		if index > 4 then
			return
		end
		setup_move(pokemon, move, index)
	end
end


function init(self)
	gooey.acquire_input()
	gui.set_render_order(gro.POPUP)
	local d = monarch.data("transfer_pokemon")
	self.to = d.to
	self.pokemon_id = d.id
	self.index = _pokemon.get_index_number(storage.get_copy(d.id))
	setup_info(self)
	if not clipboard then
		gui.set_enabled(gui.get_node("btn_share"), false)
	end
	self.swap = gui.get_node("swap")
	self.move = gui.get_node("move")
	gui.set_enabled(self.swap, false)
	gui.set_enabled(self.move, true)
	local n = gui.get_node("txt_move")
	gui.set_text(n, "MOVE TO " .. self.to)

	self.move_button_enabled = true
	if self.to == "storage" and #storage.list_of_ids_in_inventory() == 1 then
		self.move_button_enabled = false
		gui.set_enabled(gui.get_node("btn_move"), false)
		gui.set_enabled(gui.get_node("btn_release"), false)
	end

	y_size_swap_bg = gui.get_size(gui.get_node("swap_background")).y
	y_pos_tutorial = gui.get_position(gui.get_node("max_active_pokemon_tutorial")).y
end



local function move(self)
	if self.to == "PARTY" then
		if storage.free_space_in_inventory() then
			notify.notify(self.nickname .. " MOVED TO " .. self.to)
			storage.move_to_inventory(self.pokemon_id)
			update_storage()
			back()
		else
			setup_inventory(self)
			gui.set_enabled(self.swap, true)
			gui.set_enabled(self.move, false)
		end
	elseif self.to == "PC" then
		if #storage.list_of_ids_in_inventory() ~= 1 then
			notify.notify(self.nickname .. " MOVED TO " .. self.to)
			storage.move_to_storage(self.pokemon_id)
			update_storage()
			back()
		end
	end
end


local function cancel_swap(self)
	gui.set_enabled(self.swap, false)
	gui.set_enabled(self.move, true)
end

local function release(self)
	if not storage.is_inventory_pokemon(self.pokemon_id) or #storage.list_of_ids_in_inventory() ~= 1 then
		local title = "RELEASE " .. self.nickname
		monarch.show("are_you_sure", nil, {title=title, data=self.pokemon_id, sender=msg.url()})
	end
end


function on_message(self, message_id, message, sender)
	if message_id == hash("response") then
		if message.response then
			flow.start(function()
				flow.until_true(function() return not monarch.is_busy() end)
				gameanalytics.addDesignEvent {
					eventId = "Pokemon:Release",
					value = self.index
				}
				storage.release_pokemon(message.data)
				notify.notify(self.nickname .. " WAS RELEASED")
				update_storage()
				back()
			end)
		end
	end
end


function on_input(self, action_id, action)
	local b = button.on_input(action_id, action)

	if gui.is_enabled(self.swap) then
		local bg1 = gooey.button("swap_background", action_id, action, function() end)
		local bg2 = gooey.button("max_active_pokemon_tutorial", action_id, action, function() end)
		if not b and not bg1.over and not bg2.over then
			gooey.button("dimmer1", action_id, action, function() cancel_swap(self) end)
		end
	else
		local c, a, d
		if self.move_button_enabled then
			a = gooey.button("btn_move", action_id, action, function() move(self) end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_move")) end)
			c = gooey.button("btn_release", action_id, action, function() release(self) end)
			d = gooey.button("btn_share", action_id, action, function() share.export(self.pokemon_id) end, gooey_buttons.share)
		end
		gooey.button("btn_close", action_id, action, back, gooey_buttons.close_button)
		gooey.button("btn_cancel", action_id, action, function() cancel_swap(self) end, gooey_buttons.close_button)
		local g = gooey.button("background", action_id, action, function() end)

		if not a.over and not b and not c.over and not d.over and not g.over then
			gooey.button("dimmer", action_id, action, back)
		end
	end
	
	return true
end
