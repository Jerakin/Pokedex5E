local button = require "utils.button"
local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local utils = require "utils.utils"
local transitions = require "utils.transitions"

local selected_item

local function update_listitem(list, item)
	if item.index == list.selected_item then
		gui.set_color(item.nodes["txt_item"], vmath.vector3(1, 1, 0, 1))
		selected_item = item.data
	else
		gui.set_color(item.nodes["txt_item"], vmath.vector3(1, 1, 1, 1))
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
		gui.set_text(item.nodes["txt_item"], tostring(item.data or "-"))
	end
end

local function on_item_selected(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
	end
end

function init(self)
	monarch.hide("switcher")
	self.transition = transitions.default(gui.get_node("root"))
	local d = monarch.data("scrollist")
	self.all_items = utils.shallow_copy(d.items)
	self.list_items = utils.shallow_copy(d.items)
	update_list(gooey.dynamic_list("scrollist", "scroll_area", "btn_item", self.list_items))
	button.acquire()
	button.register("btn_okay", function()
		msg.post(d.sender, d.message_id, {item=selected_item})
		monarch.show("switcher", {no_stack=true}, {}, function()
			monarch.back()
		end)
	end)
end

function final(self)
	button.unregister()
end

local function filter_list(self, search_string)
	local function starts_with(str, start)
		return string.lower(str):sub(1, #start) == string.lower(start)
	end
	local function is_in(_in, str)
		return string.lower(_in):find(string.lower(str))
	end
	if #search_string > 0 then
		self.list_items = {}
		for i=#self.all_items, 1, -1 do
			if starts_with(self.all_items[i], search_string) then
				table.insert(self.list_items, 1, self.all_items[i])
			end
		end
		update_list(gooey.dynamic_list("scrollist", "scroll_area", "btn_item", self.list_items))
	else
		self.list_items = self.all_items
	end
end

local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		gui.set_text(input.node, "search")
	end

	local cursor = gui.get_node("cursor")
	if input.selected then
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(0,0,0,1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
	filter_list(self, input.text)
end



function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if next(self.list_items) ~= nil then
		gooey.dynamic_list("scrollist", "scroll_area", "btn_item", self.list_items, action_id, action, on_item_selected, update_list)
	end
	gooey.input("search_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, nil, function(input)
		refresh_input(self, input, "search_text")
	end)
end

function on_message(self, message_id, message, sender)
	transitions.on_message(self.transition, message_id, message, sender)
end