local button = require "utils.button"
local monarch = require "monarch.monarch"
local encounters = require "pokedex.encounters"
local gooey = require "gooey.gooey"
local gui_colors = require "utils.gui_colors"
local url = require "utils.url"
local utils = require "utils.utils"

local ACTIVE = vmath.vector3(1)
local INACTIVE = vmath.vector3(0.96, 0.96, 0.96, 1)
local ACTIVE_SIZE = vmath.vector3(420, 105, 0)
local INACTIVE_SIZE = vmath.vector3(380, 105, 0)

local active_slot = 0

local function delete(encounter)
	encounters.delete(encounter)
end

local function setup_pokemon_images(self, nodes, slot)
	for i=1, 7 do
		local img_node = nodes["encounter_slot/pokemon" .. i]
		if self.all_slots[slot].party and self.all_slots[slot].party[i] then
			local pokemon_sprite, texture = pokedex.get_icon(self.all_slots[slot].party[i])
			gui.set_texture(img_node, texture)
			if pokemon_sprite then
				gui.play_flipbook(img_node, pokemon_sprite)
			end
		else
			gui.set_enabled(img_node, false)
		end
	end
end


local function activate(slot)
	encounters.set_active(slot)
	monarch.show("encounter")
end

local function update_items(self, item)
	if next(self.all_slots) == nil then
		return
	end
	local name = item.nodes["encounter_slot/trainer_name"]
	local stats = item.nodes["encounter_slot/trainer_stats"]
	local delete = item.nodes["encounter_slot/btn_delete"]
	local button = item.nodes["encounter_slot/btn_slot"]
	gui.set_text(name, self.all_slots[item.data].name)

	setup_pokemon_images(self, item.nodes, item.data)
	gui.set_color(button, INACTIVE)
	gui.set_color(name, gui_colors.HERO_TEXT_FADED)
	gui.set_color(stats, gui_colors.HERO_TEXT_FADED)
	gui.set_size(item.nodes["encounter_slot/btn_root"], INACTIVE_SIZE)
	if item.data == active_slot then
		gui.set_size(item.nodes["encounter_slot/btn_root"], ACTIVE_SIZE)
		gui.set_color(item.nodes["encounter_slot/btn_root"], ACTIVE)
		gui.set_color(item.nodes["encounter_slot/trainer_name"], gui_colors.HERO_TEXT)
		gui.set_color(item.nodes["encounter_slot/trainer_stats"], gui_colors.HERO_TEXT)
	end

end


local function update_list(self, list)
	gooey.vertical_scrollbar("scrollbar/handle", "scrollbar/bar").scroll_to(0, list.scroll.y)
	for i,item in ipairs(list.items) do
		if item.data and item.data ~= "" then
			update_items(self, item)
		end
	end
end


local function delete_encounter(self, slot)
	if encounters.get_active_slot() == slot then
		encounters.set_active(nil)
	end
	encounters.delete(slot)
	gui.set_text(self.seach_text, "")
	self.scrolling_data = {}

	for index, _ in pairs(self.all_slots) do
		table.insert(self.scrolling_data, index)
	end
	self.filtered_list = utils.deep_copy(self.scrolling_data)
	update_list(self, gooey.dynamic_list("encounter_list", "scroll", "encounter_slot/btn_root", self.filtered_list))
end


function init(self)
	button.acquire()
	url.encounterS = msg.url()
	self.scrolling_data = {}
	msg.post(url.MENU, "show")
	active_slot = encounters.get_active_slot()
	self.all_slots = encounters.get_all_encounters()

	for index, _ in pairs(self.all_slots) do
		table.insert(self.scrolling_data, index)
	end
	
	self.filtered_list = utils.deep_copy(self.scrolling_data)
	
	update_list(self, gooey.dynamic_list("encounter_list", "scroll", "encounter_slot/btn_root", self.filtered_list))
end


function on_message(self, message_id, message, sender)
	if message_id == hash("response") then
		if message.response then
			delete_encounter(self, message.data)
		end
	elseif message_id == hash("search") then
		update_list(self, gooey.dynamic_list("encounter_list", "scroll", "encounter_slot/btn_root", self.filtered_list))
	end
end


function final(self)
	button.unregister()
	encounter_nodes = {}
	self.filtered_list = {}
	self.scrolling_data = {}
end


local function on_scrolled(self, scrollbar)
	gooey.dynamic_list("encounter_list", "scroll", "encounter_slot/btn_root", self.filtered_list).scroll_to(0, scrollbar.scroll.y)
end


local function encounter_list_clicked(list)
	for key, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			local value = entry.data
			if value then
				if gui.pick_node(entry.nodes["encounter_slot/btn_slot"], list.action_pos.x, list.action_pos.y) then
					activate(value)
				elseif gui.pick_node(entry.nodes["encounter_slot/btn_delete"], list.action_pos.x, list.action_pos.y) then
					monarch.show("are_you_sure", nil, {sender=msg.url(), data=value, title="Delete Encounter"})
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	if next(self.filtered_list) ~= nil then
		local list = gooey.dynamic_list("encounter_list", "scroll", "encounter_slot/btn_root", self.filtered_list, action_id, action, encounter_list_clicked, function(list) update_list(self, list) end)
		if list.max_y and list.max_y > 0 then
			gooey.vertical_scrollbar("scrollbar/handle", "scrollbar/bar", action_id, action, function(scroll) on_scrolled(self, scroll) end)
		end
	end
	gooey.button("new_encounter", action_id, action, function()
		print("new_encounter pressed")
		--monarch.show("pick_name", nil, {sender=msg.url(), slot=#self.all_slots+1})
	end)
	if encounters.get_active_slot() == nil then
		return true
	end
end
