local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local monarch = require "monarch.monarch"
local button = require "utils.button"
local natures = require "pokedex.natures"
local pokedex = require "pokedex.pokedex"
local storage = require "pokedex.storage"
local dex = require "pokedex.dex"
local _pokemon = require "pokedex.pokemon"
local url = require "utils.url"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local gui_utils = require "utils.gui"
local screens = require "utils.screens"
local messages = require "utils.messages"

local function pokemon_image(species)
	local pokemon_sprite, texture = pokedex.get_icon(species)
	gui.set_texture(gui.get_node("change_pokemon/pokemon_sprite"), texture)
	if pokemon_sprite then
		gui.play_flipbook(gui.get_node("change_pokemon/pokemon_sprite"), pokemon_sprite)
	end
	gui.set_scale(gui.get_node("change_pokemon/pokemon_sprite"), vmath.vector3(3))
end

local function save_pokemon(self)
	_pokemon.set_nickname(self.pokemon, self.nickname)
	storage.update_pokemon(self.pokemon)

	monarch.show(screens.PARTY)
end

local function evolve(self, species)
	_pokemon.evolve(self.pokemon, species, _pokemon.get_current_level(self.pokemon))
	dex.set(species, dex.states.CAUGHT)
	pokemon_edit.redraw(self)
	timer.delay(0.1, false, function() save_pokemon(self)
	end)
end

function init(self)
	self.evolve_button_active = false

	button.acquire()
	local pokemon_id = monarch.data("edit").id
	self.pokemon = storage.get_copy(pokemon_id)
	pokemon_edit.block = false
	pokemon_edit.config[hash("change_pokemon/extra")].active = true
	pokemon_edit.init(self)
	pokemon_edit.redraw(self)
	
	pokemon_image(_pokemon.get_current_species(self.pokemon))
	gui.set_enabled(gui.get_node("change_pokemon/cursor"), false)

	self.nickname = _pokemon.get_nickname(self.pokemon)
	self.evolve_button = gui.get_node("btn_evolve")
	
	local consumed_eviolite = _pokemon.get_consumed_eviolite(self.pokemon)
	gui.set_enabled(gui.get_node("change_pokemon/checkmark_eviolite_mark"), consumed_eviolite)
	gooey.checkbox("change_pokemon/bg_eviolite").set_checked(consumed_eviolite)
	
	if not _pokemon.get_species_can_evolve(self.pokemon) then
		gui.set_enabled(self.evolve_button, false)
	end

	function self.redraw(self)
		local evolution_possible = _pokemon.get_evolution_possible(self.pokemon)
		local evolution_level = evolution_possible and _pokemon.get_evolution_level(self.pokemon)
		if not _pokemon.get_consumed_eviolite(self.pokemon) and evolution_possible and evolution_level <= _pokemon.get_current_level(self.pokemon) then
			self.evolve_button_active = true
			--gui.set_enabled(self.evolve_button, true)
			gui.set_color(gui.get_node("txt_evolve"), gui_colors.BUTTON_TEXT)
			gui.play_flipbook(self.evolve_button, "common_up")
		else
			self.evolve_button_active = false
			gui.set_color(gui.get_node("txt_evolve"), gui_colors.BUTTON_TEXT_DISABLED)
			gui.play_flipbook(self.evolve_button, "common_disabled")
		end
	end

	button.register("change_pokemon/txt_max_hp", function()
		monarch.show(screens.ARE_YOU_SURE, nil, {sender=msg.url(), text="Reset HP and let the App controll it for you", title="Reset", id=messages.RESET})
	end)

	-- Update evolution button states
	self.redraw(self)
end

function final(self)
	pokemon_edit.final(self)
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
	if message_id == messages.RESPONSE and message.response then
		if message.id == "evolve" then
			evolve(self, message.data)
		end
	end
end

local function evolve_pokemon(self)
	local evolve_into = pokedex.get_evolutions(_pokemon.get_current_species(self.pokemon), _pokemon.get_gender(self.pokemon))
	if #evolve_into == 1 then
		monarch.show(screens.ARE_YOU_SURE, nil, {title="Evolve into ".. evolve_into[1] .. " at level ".. _pokemon.get_current_level(self.pokemon) .. "?", text="This will automatically save and exit to Party", sender=msg.url(), data=evolve_into[1], id="evolve"})
	else
		monarch.show(screens.SCROLLIST, {}, {items=evolve_into, message_id="evolve", sender=msg.url(), title="Pick evolution"})
	end
end


local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		gui.set_text(input.node, self.nickname or _pokemon.get_current_species(self.pokemon):upper())
	end

	local cursor = gui.get_node("change_pokemon/cursor")
	if input.selected then
		if input.empty then
			gui.set_text(input.node, _pokemon.get_current_species(self.pokemon):upper())
			self.nickname = nil
		else
			self.nickname = input.text .. input.marked_text
		end
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width*0.5, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(0,0,0,1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(self, action_id, action)

	gooey.input("change_pokemon/species", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, {use_marked_text=false}, function(input)
		refresh_input(self, input, "name_text")
	end)
	
	gooey.button("btn_edit", action_id, action, function()
		save_pokemon(self)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_save")) end)
	
	if self.evolve_button_active then
		gooey.button("btn_evolve", action_id, action, function()
			evolve_pokemon(self)
		end, function(b) gooey_buttons.common_button(b, gui.get_node("txt_evolve")) end)
	end
end
