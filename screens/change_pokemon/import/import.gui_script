local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local button = require "utils.button"
local natures = require "pokedex.natures"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local pokedex = require "pokedex.pokedex"
local url = require "utils.url"
local _pokemon = require "pokedex.pokemon"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local notify = require "utils.notify"
local tracking_id = require "utils.tracking_id"
local dex = require "pokedex.dex"

local HAVE_EVOLVED = false

local active_buttons = {}

local function pokemon_image(species)
	local pokemon_sprite, texture = pokedex.get_sprite(species)
	gui.set_texture(gui.get_node("change_pokemon/pokemon_sprite"), "sprite0")
	gui.play_flipbook(gui.get_node("change_pokemon/pokemon_sprite"), pokemon_sprite)
	gui.set_scale(gui.get_node("change_pokemon/pokemon_sprite"), vmath.vector3(3))
end

local function exit(self)
	local stack = monarch.get_stack()
	for i=#monarch.get_stack(), 1, -1 do
		if stack[i] == hash("storage") then
			gameanalytics.addDesignEvent {
				eventId = "Navigation:PC",
				value = tracking_id[monarch.top()]
			}
			monarch.show("storage")
		elseif stack[i] == hash("party") or stack[i] == hash("profiles") then
			gameanalytics.addDesignEvent {
				eventId = "Navigation:Party",
				value = tracking_id[monarch.top()]
			}
			monarch.show("party")
		end
	end

	gameanalytics.addDesignEvent {
		eventId = "Navigation:Party",
		value = tracking_id[monarch.top()]
	}
	monarch.show("party")
end

local function add_pokemon(self)
	gameanalytics.addDesignEvent {
		eventId = "Pokemon:Import",
		value = _pokemon.get_index_number(self.pokemon)
	}
	dex.set(self.pokemon.species.current, dex.states.CAUGHT)
	if storage.is_party_full() then
		notify.notify(self.pokemon.species.current .. " added to PC")
	else
		notify.notify(self.pokemon.species.current .. " added to party")
	end
	storage.add(self.pokemon)
	exit(self)
end

function init(self)
	button.acquire()
	gui.set_enabled(gui.get_node("change_pokemon/cursor"), false)

	self.pokemon = monarch.data("import_pokemon").pokemon
	pokemon_edit.init(self)
	pokemon_edit.redraw(self)

	pokemon_image(_pokemon.get_current_species(self.pokemon))
	pokemon_edit.init(self)
	
	local b = {node="btn_add", func=function() add_pokemon(self) end, refresh=function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end}
	table.insert(active_buttons, b)

	if storage.is_party_full() then
		gui.set_text(gui.get_node("txt_add"), "IMPORT TO PC")
	end
end

function final(self)
	active_buttons = {}
	pokemon_edit.final(self)
	button.unregister()
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(self, action_id, action)
	for _, button in pairs(active_buttons) do
		gooey.button(button.node, action_id, action, button.func, button.refresh)
	end
end
