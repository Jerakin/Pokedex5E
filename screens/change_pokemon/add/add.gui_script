local pokemon_edit = require "screens.change_pokemon.change_pokemon"
local button = require "utils.button"
local natures = require "pokedex.natures"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local pokedex = require "pokedex.pokedex"
local url = require "utils.url"
local _pokemon = require "pokedex.pokemon"
local gui_colors = require "utils.gui_colors"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local notify = require "utils.notify"
local dex = require "pokedex.dex"
local screens = require "utils.screens"
local messages = require "utils.messages"

local HAVE_EVOLVED = false

local active_buttons = {}

local function exit(self)
	local stack = monarch.get_stack()
	for i=#monarch.get_stack(), 1, -1 do
		if stack[i] == screens.STORAGE then
			monarch.show(screens.STORAGE)
		elseif stack[i] == screens.PARTY or stack[i] == screens.PROFILES then
			monarch.show(screens.PARTY)
		end
	end

	monarch.show(screens.PARTY)
end

local function add_pokemon(self)
	self.pokemon.level.caught = _pokemon.get_current_level(self.pokemon)
	self.pokemon.exp = pokedex.get_experience_for_level(self.pokemon.level.caught-1)
	self.pokemon.hp.current = _pokemon.get_total_max_hp(self.pokemon)
	dex.set(self.pokemon.species.current, dex.states.CAUGHT)
	if storage.is_party_full() then
		notify.notify(self.pokemon.species.current .. " added to PC")
	else
		notify.notify(self.pokemon.species.current .. " added to party")
	end
	storage.add(self.pokemon)
	exit(self)
end

function init(self)
	button.acquire()
	gui.set_color(gui.get_node("change_pokemon/species"), gui_colors.HERO_TEXT_FADED)
	gui.set_color(gui.get_node("change_pokemon/txt_nature"), gui_colors.HERO_TEXT_FADED)
	gui.play_flipbook(gui.get_node("btn_add"), "common_down")
	gui.get_color(gui.get_node("txt_add"), gui_colors.HERO_TEXT_FADED)
	gui.set_enabled(gui.get_node("change_pokemon/cursor"), false)
	pokemon_edit.config[hash("change_pokemon/extra")].active = false
	pokemon_edit.config[hash("change_pokemon/asi/root")].active = false
	pokemon_edit.block = true
	pokemon_edit.init(self)
	function self.register_buttons_after_species(self)
		pokemon_edit.config[hash("change_pokemon/abilities")].active = true
		gui.play_flipbook(gui.get_node("btn_add"), "common_up")
		gui.get_color(gui.get_node("txt_add"), gui_colors.HERO_TEXT)
		local b = {node="btn_add", func=function() add_pokemon(self) end, refresh=function(b) gooey_buttons.common_button(b, gui.get_node("txt_add")) end}
		table.insert(active_buttons, b)
	end
	
	button.register("change_pokemon/btn_species", function()
		monarch.show(screens.SCROLLIST, {}, {items=pokedex.list, message_id=messages.SPECIES, sender=msg.url(), title="Pick your Pokemon"})
	end)
	
	if storage.is_party_full() then
		gui.set_text(gui.get_node("txt_add"), "ADD TO PC")
	end
end

function final(self)
	active_buttons = {}
	pokemon_edit.final(self)
	button.unregister()
end

function on_message(self, message_id, message, sender)
	pokemon_edit.on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	pokemon_edit.on_input(self, action_id, action)
	for _, button in pairs(active_buttons) do
		gooey.button(button.node, action_id, action, button.func, button.refresh)
	end
end
