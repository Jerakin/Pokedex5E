local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local utils = require "utils.utils"
local gui_colors = require "utils.gui_colors"
local movedex = require "pokedex.moves"
local pokedex = require "pokedex.pokedex"
local gooey_button = require "utils.gooey_buttons"
local gooey_scrolling_list = require "utils.gooey_scrolling_list"
local url = require "utils.url"
local messages = require "utils.messages"
local screens = require "utils.screens"

local selected_item
local sender
local message_id

local function update_listitem(list, item)
	gui.set_text(item.nodes["scrollist/txt_item"], tostring(item.data):upper())
	gui.set_color(item.nodes["scrollist/txt_item"], movedex.get_move_color(item.data))
	gui.play_flipbook(item.nodes["scrollist/icon"], movedex.get_move_icon(item.data))
	if item.index == list.selected_item then
		selected_item = item.data
	end
end

local function on_item_selected(self, list)
	for i,item in ipairs(list.items) do
		if item.data and item.index == list.selected_item then
			monarch.show(screens.MOVES_CONFIRM, {}, {message_id=message_id, sender=sender, move_to_replace=self.move_to_replace, replacement_move=item.data, pokemon=self.pokemon})
		end
	end
end

local function filter_out_current_moves(self, list_of_moves)
	list_of_moves = utils.shallow_copy(list_of_moves)
	for move, _ in pairs(self.current_moves) do
		for i, selected_move in pairs(list_of_moves) do
			if move == selected_move then
				table.remove(list_of_moves, i)
			end
		end
	end
	return list_of_moves
end

local function refresh_list(self)
	self.list_items = utils.shallow_copy(self.all_items)
	self.scrolling_list.refresh(self.list_items, true)
end
	
local function set_all_moves(self)
	self.all_items = filter_out_current_moves(self, movedex.list)
	refresh_list(self)
end

local function set_current(self)
	self.all_items = filter_out_current_moves(self, pokedex.get_moves(self.species, self.variant, self.level))
	refresh_list(self)
end


local function set_max(self)
	self.all_items = filter_out_current_moves(self, pokedex.get_moves(self.species, self.variant, 20))
	refresh_list(self)
end


local function set_hm_tm(self)
	self.all_items = filter_out_current_moves(self,  pokedex.get_move_machines(self.species, self.variant))
	refresh_list(self)
end

function init(self)
	gooey.acquire_input()
	msg.post(url.MENU, messages.HIDE)
	local d = monarch.data("moves_scrollist")
	sender = d.sender
	message_id = d.message_id
	self.level = d.level
	self.species = d.species
	self.current_moves = d.current_moves
	self.move_to_replace = d.move_to_replace
	self.pokemon = d.pokemon
	self.variant = d.pokemon.variant
	self.sub_list = "current"	
	local starting_moves = pokedex.get_moves(self.species, self.variant, self.level)
	self.all_items = filter_out_current_moves(self, starting_moves)
	self.list_items = utils.shallow_copy(self.all_items)
	gui.set_text(gui.get_node("scrollist/topbar/title"), "Choose New Move")
	gui.set_enabled(gui.get_node("scrollist/cursor"), false)

	self.scrolling_list = gooey_scrolling_list.create_vertical_dynamic("scrollist", "scrollist/scroll_area", "scrollist/btn_item", "scrollist/scrollbar/handle", "scrollist/scrollbar/bar", "scrollist/scrollbar/visual", update_listitem, function(list) on_item_selected(self, list) end)
	self.scrolling_list.refresh(self.list_items, true)
end

local function filter_list(self, search_string)
	local function starts_with(str, start)
		return string.lower(str):sub(1, #start) == string.lower(start)
	end
	local function is_in(_in, str)
		return string.lower(_in):find(string.lower(str))
	end
	if #search_string > 0 then
		self.list_items = {}
		for i=#self.all_items, 1, -1 do
			if starts_with(self.all_items[i], search_string) then
				table.insert(self.list_items, 1, self.all_items[i])
			end
		end

		self.scrolling_list.refresh(self.list_items, false)
	else
		self.list_items = self.all_items
	end
end

local function refresh_input(self, input, node_id)
	if input.empty and not input.selected then
		gui.set_text(input.node, "SEARCH")
	end

	local cursor = gui.get_node("scrollist/cursor")
	if input.selected then
		if input.empty then
			gui.set_text(input.node, "")
		end
		gui.set_enabled(cursor, true)
		gui.set_position(cursor, vmath.vector3(input.total_width*0.5, 0, 0))
		gui.cancel_animation(cursor, gui.PROP_COLOR)
		gui.set_color(cursor, vmath.vector4(0,0,0,1))
		gui.animate(cursor, gui.PROP_COLOR, vmath.vector4(1,1,1,0), gui.EASING_INSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	else
		gui.set_enabled(cursor, false)
		gui.cancel_animation(cursor, gui.PROP_COLOR)
	end
	filter_list(self, input.text)
end

function on_input(self, action_id, action)
	self.scrolling_list.on_input(self.list_items, action_id, action)
	gooey.input("scrollist/search_text", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, {use_marked_text=false}, function(input)
		refresh_input(self, input, "search_text")
	end)
	gooey.button("btn_current_lvl", action_id, action, function() set_current(self) end, function(b) gooey_button.common_button(b, gui.get_node("txt_current_lvl")) end)
	gooey.button("btn_hm_tm", action_id, action,  function() set_hm_tm(self) end, function(b) gooey_button.common_button(b, gui.get_node("txt_hm_tm")) end)
	gooey.button("btn_max_lvl", action_id, action,  function() set_max(self) end, function(b) gooey_button.common_button(b, gui.get_node("txt_max_lvl")) end)
	gooey.button("btn_all", action_id, action,  function() set_all_moves(self) end, function(b) gooey_button.common_button(b, gui.get_node("txt_all")) end)
	gooey.button("scrollist/btn_quit", action_id, action, function()
		monarch.show(monarch.top(-1), {clear=true})
	end, gooey_button.close_button)
end
