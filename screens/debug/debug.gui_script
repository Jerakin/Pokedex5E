local monarch = require "monarch.monarch"
local url = require "utils.url"
local gooey = require "gooey.gooey"
local gooey_buttons = require "utils.gooey_buttons"
local debug = require "screens.debug.debug"
local gui_utils = require "utils.gui"
local messages = require "utils.messages"
local platform = require "utils.platform"

local function game_analyctics()
	local active = true
	local version = ""
	local key = ""
	local secret = ""

	if gameanalytics.mock then
		active = false
	end
	if platform.MACOS then
		version = "Not supported"
		key = "Not supported"
		secret = "Not supported"
	elseif platform.WINDOWS then
		version = sys.get_config("gameanalytics.build_windows", "missing")
		key = sys.get_config("gameanalytics.game_key_windows", "missing")
		secret = sys.get_config("gameanalytics.secret_key_windows", "missing")
	elseif platform.IOS then
		version = sys.get_config("gameanalytics.build_ios", "missing")
		key = sys.get_config("gameanalytics.game_key_ios", "missing")
		secret = sys.get_config("gameanalytics.secret_key_windows", "missing")
	elseif platform.ANDROID then
		version = sys.get_config("gameanalytics.build_android", "missing")
		key = sys.get_config("gameanalytics.game_key_android", "missing")
		secret = sys.get_config("gameanalytics.secret_key_windows", "missing")
	elseif platform.WEB then
		version = sys.get_config("gameanalytics.build_html5", "missing")
		key = sys.get_config("gameanalytics.game_key_html5", "missing")
		secret = sys.get_config("gameanalytics.secret_key_windows", "missing")
	end
	
	gui.set_text(gui.get_node("ga_active"), "Active: " .. tostring(active))
	gui.set_text(gui.get_node("ga_version"), "Version: " .. version)
	gui.set_text(gui.get_node("ga_gamekey"), "Key: " .. key)
	gui.set_text(gui.get_node("ga_gamesecret"), "Secret: " .. secret)
	gui_utils.scale_text_to_fit_size(gui.get_node("ga_gamesecret"))
	gui_utils.scale_text_to_fit_size(gui.get_node("ga_gamekey"))
end

function init(self)
	msg.post(".", messages.ACQUIRE_INPUT_FOCUS)
	msg.post(url.MENU, messages.HIDE)
	game_analyctics()

	gui.set_enabled(gui.get_node("load/btn"), false)
	if platform.WINDOWS then
		gui.set_enabled(gui.get_node("load/btn"), true)
	end
end

function final(self)
	msg.post(url.MENU, messages.SHOW)
end

function on_input(self, action_id, action)
	gooey.button("btn_back", action_id, action, function()
		monarch.back()
	end)
	
	gooey.button("add_one/btn", action_id, action, function()
		debug.add_pokemon()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_one/txt")) end)
	
	gooey.button("add_5/btn", action_id, action, function()
		debug.add_pokemon(5)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_5/txt")) end)
	
	gooey.button("add_100/btn", action_id, action, function()
		debug.add_pokemon(100)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_100/txt")) end)
	
	gooey.button("add_all/btn", action_id, action, function()
		debug.add_all_pokemon()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("add_all/txt")) end)

	gooey.button("moves/btn", action_id, action, function()
		debug.add_all_moves()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("moves/txt")) end)
	
	gooey.button("ga_bg", action_id, action, function()
		local loaded = crash.load_previous()
		if loaded then
			print("### BACKTRACE ###")
			print(crash.get_backtrace(loaded))
			print("### EXTRA DATA ###")
			print(crash.get_extra_data(loaded))
			print("####### END ######")
		else
			print("##### NO LOGS #####")
		end
	end)

	if gui.pick_node(gui.get_node("load/btn"), action.x, action.y) and action.pressed then
		debug.load_backup()
	end
	
end
