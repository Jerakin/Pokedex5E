local monarch = require "monarch.monarch"
local gooey_buttons = require "utils.gooey_buttons"
local gooey_scrolling_list = require "utils.gooey_scrolling_list"
local gooey = require "gooey.gooey"
local pokedex = require "pokedex.pokedex"
local dex = require "pokedex.dex"
local gui_colors = require "utils.gui_colors"
local gui_utils = require "utils.gui"
local search_bar =  require "screens.pokedex.search"
local url = require "utils.url"
local dex_data = require "pokedex.dex_data"
local screens = require "utils.screens"
local messages = require "utils.messages"

local pokedex_data = {}
local action_position = vmath.vector3()
local region_map
local mark_as

local is_searching = false
local scroll_list_position = 0
local block_animation = false

local function table_of_rows(self)
	local l = {}
	for i=1, math.ceil(#pokedex_data) do
		table.insert(l, i)
	end

	return l
end

local state_map = {
	[dex.states.SEEN]			={pokeball_color=vmath.vector4(0), pokemon_color=vmath.vector4(1,1,1,0.3), index=true},
	[dex.states.CAUGHT]			={pokeball_color=vmath.vector4(1), pokemon_color=vmath.vector4(1), index=true},
	[dex.states.UNENCOUNTERED]	={pokeball_color=vmath.vector4(0), pokemon_color=vmath.vector4(0,0,0,0.3), index=true}
}

local function animate_out()
	if not block_animation then
		scroll_list_position = 0
		gui.animate(gui.get_node("pokedex_info"), "size.y", 150, gui.EASING_INSINE, 0.3, 0, function() block_animation = false end)
		gui.animate(gui.get_node("scroll_list_animation_root"), "position.y", 560, gui.EASING_INSINE, 0.3, 0)
		block_animation = true
	end
end

local function animate_in()
	if not block_animation then
		scroll_list_position = 1
		gui.animate(gui.get_node("pokedex_info"), "size.y", 0, gui.EASING_INSINE, 0.3, 0, function() block_animation = false end)
		gui.animate(gui.get_node("scroll_list_animation_root"), "position.y", 690, gui.EASING_INSINE, 0.3)
		block_animation = true
	end
end

local function reindex(the_table)
	local new_table = {}
	for _, value in pairs(the_table) do
		table.insert(new_table, value)
	end
	return new_table
end

local function update_dex_data(self)
	pokedex_data = {}
	for i=1, math.ceil(#reindex(self.filtered_list) / 5) do
		pokedex_data[i] = {}
		for a=1, 5 do
			local species = reindex(self.filtered_list)[(i-1)*5 + a]
			if species then
				local sprite, texture = pokedex.get_sprite(species)
				local state = dex.get(species)
				local index = string.format("#%03d", pokedex.get_index_number(species))
				if state == dex.states.CAUGHT then
					index = string.format("%03d", pokedex.get_index_number(species))
				end
				pokedex_data[i][a] = {sprite=sprite, texture=texture, species=species, state_map=state_map[state], index=index, state=state}
			end
		end
	end
	self.pokemon_rows = table_of_rows(self)
end

local function update_item(list, item)
	for i=1, 5 do
		local sprite_node = item.nodes["pokemon_row/pokemon" .. i .. "/pokemon_sprite"]
		local pokeball = item.nodes["pokemon_row/pokemon" .. i .. "/caught"]
		local index = item.nodes["pokemon_row/pokemon" .. i .. "/index"]
		local data = pokedex_data[item.data]
		if data and data[i] ~= nil then
			gui.set_enabled(sprite_node, true)
			gui.set_enabled(pokeball, true)
			gui.set_enabled(index, true)
			gui.set_enabled(index, data[i].state_map.index)
			gui.set_text(index, data[i].index)
			gui.set_color(sprite_node, data[i].state_map.pokemon_color)
			gui.set_color(pokeball, data[i].state_map.pokeball_color)
			gui.set_texture(sprite_node, data[i].texture)
			if data[i].sprite then
				gui.play_flipbook(sprite_node, data[i].sprite)
			end
		else
			gui.set_enabled(sprite_node, false)
			gui.set_enabled(pokeball, false)
			gui.set_enabled(index, false)
		end
	end
end

local function set_active_button(list)
	local active
	for _, index in pairs(dex_data.order) do
		local region = region_map[index]
		gui.play_flipbook(region.button, "common_up")
		gui.set_color(region.txt, gui_colors.BUTTON_TEXT)
		if list.scroll.y+0.0000001 > region.scroll then
			active = region
		end
	end
	if active then
		gui.play_flipbook(active.button, "common_down")
		gui.set_color(active.txt, gui_colors.BUTTON_TEXT_PRESSED)
		if scroll_list_position ~= 1 then
			animate_in()
		end
	else 
		if scroll_list_position ~= 0 then
			animate_out()
		end
	end
end

local function update_pokedex_info(self)
	gui.set_text(gui.get_node("txt_seen_kanto"), dex.get_region_seen(dex_data.regions.KANTO))
	gui.set_text(gui.get_node("txt_seen_johto"), dex.get_region_seen(dex_data.regions.JOHTO))
	gui.set_text(gui.get_node("txt_seen_hoenn"), dex.get_region_seen(dex_data.regions.HOENN))
	gui.set_text(gui.get_node("txt_seen_sinnoh"), dex.get_region_seen(dex_data.regions.SINNOH))
	gui.set_text(gui.get_node("txt_seen_unova"), dex.get_region_seen(dex_data.regions.UNOVA))
	gui.set_text(gui.get_node("txt_seen_kalos"), dex.get_region_seen(dex_data.regions.KALOS))
	gui.set_text(gui.get_node("txt_seen_alola"), dex.get_region_seen(dex_data.regions.ALOLA))
	gui.set_text(gui.get_node("txt_caught_kanto"), dex.get_region_caught(dex_data.regions.KANTO))
	gui.set_text(gui.get_node("txt_caught_johto"), dex.get_region_caught(dex_data.regions.JOHTO))
	gui.set_text(gui.get_node("txt_caught_hoenn"), dex.get_region_caught(dex_data.regions.HOENN))
	gui.set_text(gui.get_node("txt_caught_sinnoh"), dex.get_region_caught(dex_data.regions.SINNOH))
	gui.set_text(gui.get_node("txt_caught_unova"), dex.get_region_caught(dex_data.regions.UNOVA))
	gui.set_text(gui.get_node("txt_caught_kalos"), dex.get_region_seen(dex_data.regions.KALOS))
	gui.set_text(gui.get_node("txt_caught_alola"), dex.get_region_seen(dex_data.regions.ALOLA))
end

local function scroll_list_click(self, list)
	for a, entry in pairs(list.items) do
		if entry.index == list.selected_item then
			for i=1, 5 do
				local sprite_node = entry.nodes[hash("pokemon_row/pokemon" .. i .. "/pokemon_sprite")]
				if gui.pick_node(sprite_node, action_position.x, action_position.y) then
					local species = reindex(self.filtered_list)[(list.selected_item-1)*5 + i]
					if species and mark_as then
						dex.set(species, mark_as)
						update_dex_data(self)
						update_pokedex_info(self)
						pokedex_data[list.selected_item][i].state = state_map[mark_as]
					elseif species and mark_as == nil then
						monarch.show(screens.POKEDEX_POKEMON, nil, {species=species, row=list.selected_item, index=i, sender=msg.url()})
					end
				end
			end
		end
	end
end

function init(self)
	region_map = {
		[dex_data.regions.OTHER]={name="Others", low=dex_data.max_index[dex_data.regions.KALOS]+1, high=dex_data.max_index[dex_data.regions.OTHER], button=gui.get_node("btn_region_other"), txt=gui.get_node("txt_other"), scroll=1},
		[dex_data.regions.KANTO]={name="Kanto", low=1, high=dex_data.max_index[dex_data.regions.KANTO], button=gui.get_node("btn_region1"), txt=gui.get_node("txt_kanto"), scroll=0.00001},
		[dex_data.regions.JOHTO]={name="Johto", low=dex_data.max_index[dex_data.regions.KANTO]+1, high=dex_data.max_index[dex_data.regions.JOHTO], button=gui.get_node("btn_region2"), txt=gui.get_node("txt_johto"), scroll=0.21746701002121},
		[dex_data.regions.HOENN]={name="Hoenn", low=dex_data.max_index[dex_data.regions.JOHTO]+1, high=dex_data.max_index[dex_data.regions.HOENN], button=gui.get_node("btn_region3"), txt=gui.get_node("txt_hoenn"), scroll=0.36296102404594},
		[dex_data.regions.SINNOH]={name="Sinnoh", low=dex_data.max_index[dex_data.regions.HOENN]+1, high=dex_data.max_index[dex_data.regions.SINNOH], button=gui.get_node("btn_region4"), txt=gui.get_node("txt_sinnoh"), scroll=0.55948656797409},
		[dex_data.regions.UNOVA]={name="Unova", low=dex_data.max_index[dex_data.regions.SINNOH]+1, high=dex_data.max_index[dex_data.regions.UNOVA], button=gui.get_node("btn_region5"), txt=gui.get_node("txt_unova"), scroll=0.71236383914948},
		[dex_data.regions.KALOS]={name="Kalos", low=dex_data.max_index[dex_data.regions.UNOVA]+1, high=dex_data.max_index[dex_data.regions.KALOS], button=gui.get_node("btn_region6"), txt=gui.get_node("txt_kalos"), scroll=0.93745929002762},
		[dex_data.regions.ALOLA]={name="Alola", low=dex_data.max_index[dex_data.regions.KALOS]+1, high=dex_data.max_index[dex_data.regions.ALOLA], button=gui.get_node("btn_region7"), txt=gui.get_node("txt_alola"), scroll=0.9},
	}

	url.POKEDEX = msg.url()
	msg.post(url.MENU, messages.SHOW)
	self.all_pokemons = pokedex.unique
	self.filtered_list = pokedex.unique
	local rows = math.ceil(#self.all_pokemons/5)
	if #self.all_pokemons ~= dex_data.max_index[dex_data.total_regions] then
		for region, data in pairs(region_map) do
			if region ~= dex_data.regions.KANTO and region ~= dex_data.regions.OTHER then
				data.scroll = data.low/#self.all_pokemons
			end
		end
	end
	
	self.mark_menu_active = false
	self.mark_txt = gui.get_node("txt_mark")
	self.mark_menu = gui.get_node("mark_menu")
	self.text_node = gui.get_node("search_text")

	gui.set_enabled(self.mark_menu, self.mark_menu_active)
	update_dex_data(self)

	self.scrolling_list = gooey_scrolling_list.create_vertical_dynamic("pokedex", "scrollist", "pokemon_row/row", "scrollbar/handle", "scrollbar/bar", "scrollbar/visual", update_item, function(list) scroll_list_click(self, list) end, {fn_on_list_update = set_active_button})
	self.scrolling_list.refresh(self.pokemon_rows)
	
	update_pokedex_info(self)
end

function final(self)
	dex.save()
end

local function scroll_to_position(self, pos)
	self.scrolling_list.scroll_to_position(self.pokemon_rows, pos)
end

local function toogle_mark_menu(self)
	local btn_state = {[true]="common_down", [false]="common_up"}
	local txt_color = {[true]=gui_colors.BUTTON_TEXT_PRESSED, [false]=gui_colors.BUTTON_TEXT}
	local txt = {[dex.states.SEEN]="SEEN", [dex.states.CAUGHT]="CAUGHT", [dex.states.UNENCOUNTERED]="NOT SEEN"}

	self.mark_menu_active = not self.mark_menu_active
	gui.set_enabled(self.mark_menu, self.mark_menu_active)
	gui.play_flipbook(gui.get_node("btn_mark"), btn_state[self.mark_menu_active])
	gui.set_color(gui.get_node("txt_mark"), txt_color[self.mark_menu_active])
	gui.set_text(gui.get_node("txt_mark"), txt[mark_as] or "MARK")
end

function on_input(self, action_id, action)
	action_position.x = action.x
	action_position.y = action.y
	gooey.button("btn_region1", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.KANTO].scroll)
	end)
	gooey.button("btn_region2", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.JOHTO].scroll)
	end)
	gooey.button("btn_region3", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.HOENN].scroll)
	end)
	gooey.button("btn_region4", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.SINNOH].scroll)
	end)
	gooey.button("btn_region5", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.UNOVA].scroll)
	end)
	gooey.button("btn_region6", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.KALOS].scroll)
	end)
	gooey.button("btn_region7", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.ALOLA].scroll)
	end)
	gooey.button("btn_region_other", action_id, action, function()
		scroll_to_position(self, region_map[dex_data.regions.OTHER].scroll)
	end)
	local a = gooey.button("btn_mark", action_id, action, function()
		toogle_mark_menu(self)
	end)
	if a.over then
		return
	end
	if self.mark_menu_active then
		local b = gooey.button("btn_seen", action_id, action, function()
			mark_as = dex.states.SEEN
			toogle_mark_menu(self)
		end)
		local c = gooey.button("btn_caught", action_id, action, function()
			mark_as = dex.states.CAUGHT
			toogle_mark_menu(self)
		end)
		local d = gooey.button("btn_unencountered", action_id, action, function()
			mark_as = dex.states.UNENCOUNTERED
			toogle_mark_menu(self)
		end)
		local e = gooey.button("btn_no_mark", action_id, action, function()
			mark_as = nil
			toogle_mark_menu(self)
		end)
		if action.released and not a.over and not b.over and not c.over and not d.over and not e.over then
			mark_as = nil
			toogle_mark_menu(self)
		end
		return
	end
	local s = search_bar.on_input(self, action_id, action)
	if s.over then
		return
	end

	self.scrolling_list.on_input(self.pokemon_rows, action_id, action)
end

function on_message(self, message_id, message)
	if message_id == messages.MARK then
		pokedex_data[message.row][message.index].state = state_map[message.state]
		update_dex_data(self)
		self.scrolling_list.refresh(self.pokemon_rows)
		update_pokedex_info(self)
	elseif message_id == messages.SEARCH then
		update_dex_data(self)
		is_searching = #pokedex.unique ~= #self.filtered_list
		self.scrolling_list.refresh(self.pokemon_rows)
	end
end