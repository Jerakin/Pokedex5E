local button = require "utils.button"
local monarch = require "monarch.monarch"
local storage = require "pokedex.storage"
local gooey = require "gooey.gooey"
local utils = require "utils.utils"
local gesture = require "utils.gesture"
local url = require "utils.url"
local profiles = require "pokedex.profiles"

local STORAGE_ROWS = 4
local STORAGE_COLUMNS = 2
local INVENTORY_COLUMNS = 2

local NUMBER_OF_PAGES = 2

local WHITE = vmath.vector4(1, 1, 1, 1)
local BLACK = vmath.vector4(0, 0, 0, 1)

local position = vmath.vector3()

local selected_storage = {}
local selected_inventory = {}
local max_move = 0

local function toggle_inventory(id)
	if selected_inventory[id] then
		selected_inventory[id] = nil
	else
		selected_inventory[id] = id
	end
end

local function setup_inventory(self)
	for _, b in pairs(self.inventory_buttons) do
		button.unregister(b)
	end
	self.inventory_buttons = {}
	local inventory = storage.list_of_ids_in_inventory()
	max_move = 6 - #inventory
	local pokemon
	local node_prefix
	local text_node
	local level_node
	local check_node

	for i=1, 6 do
		pokemon = storage.get_copy(inventory[i])
		node_prefix = "inventory_pokemon_" .. i
		if pokemon then
			gui.set_enabled(gui.get_node(node_prefix .. "/root"), true)
			gui.set_text(gui.get_node(node_prefix .. "/txt_level"), "Lv. " .. pokemon.level)
			gui.set_text(gui.get_node(node_prefix .. "/txt_spicies"), pokemon.species)
			local mark_node = gui.get_node(node_prefix .. "/checkmark_mark")
			gui.set_enabled(mark_node, false)
			local b = button.register(gui.get_node(node_prefix .. "/root"), function()
				toggle_inventory(inventory[i])
				if selected_inventory[inventory[i]] then
					max_move = max_move + 1
					gui.set_enabled(mark_node, true)
				else
					max_move = max_move - 1
					gui.set_enabled(mark_node, false)
				end
			end)
			table.insert(self.inventory_buttons, b)
		else
			gui.set_enabled(gui.get_node(node_prefix .. "/root"), false)
		end
	end
end

local function toggle_storage(item)
	if max_move > 0 then
		if selected_storage[item.data] then
			selected_storage[item.data] = nil
		else
			selected_storage[item.data] = item.data
		end
	end
end

local function update_listitem(list, item)
	if item.index == list.selected_item then
		toggle_storage(item)
		list.selected_item = nil
	end
end

local function update_list(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
		local pokemon = storage.get_copy(item.data)
		if pokemon then
			local index = 0
			for name, data in pairs(pokemon.moves) do
				index = index + 1
				gui.set_text(item.nodes[hash(list.id .. "/move_" .. index)], name)
			end

			for i=index, 4 do
				--gui.set_text(item.nodes[hash(list.id .. "/move_" .. i)], "")
			end
			gui.set_text(item.nodes[hash(list.id .. "/txt_level")], "Lv. " .. pokemon.level)
			gui.set_text(item.nodes[hash(list.id .. "/txt_spicies")], pokemon.species)
			if selected_storage[item.data] then
				gui.set_enabled(item.nodes[hash(list.id .. "/checkmark_mark")], true)
			else
				gui.set_enabled(item.nodes[hash(list.id .. "/checkmark_mark")], false)
			end
		end
	end
end


local function on_item_selected(list)
	for i,item in ipairs(list.items) do
		update_listitem(list, item)
	end
end


function init(self)
	button.acquire()
	msg.post(url.SWITCHER, "activate", {screen="storage"})
	self.list_items = storage.list_of_ids_in_storage()
	
	self.inventory_buttons = {}
	gui.set_text(gui.get_node("title"), profiles.get_active_name() .. "'s PC")
	button.register("btn_move", function()
		for i, pokemon_id in pairs(selected_inventory) do
			storage.move_to_storage(pokemon_id)
		end
		for i, pokemon_id in pairs(selected_storage) do
			storage.move_to_inventory(pokemon_id)
		end
		self.list_items = storage.list_of_ids_in_storage()
		update_list(gooey.dynamic_list("storage_pokemon", "storage", "storage_pokemon/root", self.list_items))
		setup_inventory(self)
		selected_inventory = {}
		selected_storage = {}
	end)

	update_list(gooey.dynamic_list("storage_pokemon", "storage", "storage_pokemon/root", self.list_items))
	setup_inventory(self)
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
	if next(self.list_items) ~= nil then
		gooey.dynamic_list("storage_pokemon", "storage", "storage_pokemon/root", self.list_items, action_id, action, on_item_selected, update_list)
	end
end

function final(self)
	button.unregister()
end