local monarch = require "monarch.monarch"
local gooey = require "gooey.gooey"
local gooey_buttons = require "utils.gooey_buttons"
local storage = require "pokedex.storage"
local trainer = require "pokedex.trainer"
local profiles = require "pokedex.profiles"
local type_data = require "utils.type_data"
local gesture = require "utils.gesture"
local gui_colors = require "utils.gui_colors"
local url = require "utils.url"


local type_buttons = {
    normal = "Normal",
    fire = "Fire",
    water = "Water",
    electric = "Electric",
    grass = "Grass",
    ice = "Ice",
    fighting = "Fighting",
    poison = "Poison",
    ground = "Ground",
    flying = "Flying",
    psychic = "Psychic",
    bug = "Bug",
    rock = "Rock",
    ghost = "Ghost",
    dragon = "Dragon",
    dark = "Dark",
    steel = "Steel",
    fairy = "Fairy"
}

function final(self)
    trainer.save()
end

local function redraw()
    gui.set_text(gui.get_node("STAB_value"), trainer.get_all_levels_STAB())
    gui.set_text(gui.get_node("attack_value"), trainer.get_attack_roll())
    gui.set_text(gui.get_node("evolution_level_value"), trainer.get_evolution_level())
    gui.set_text(gui.get_node("damage_value"), trainer.get_damage())
    gui.set_text(gui.get_node("asi_value"), trainer.get_asi())
    gui.set_text(gui.get_node("move_value"), trainer.get_move())

    for name, _type in pairs(type_buttons) do
        gui.set_text(gui.get_node("type_master/" .. name .. "/value"), trainer.get_type_master_STAB(_type))
        gui.set_text(gui.get_node("stab/" .. name .. "/value"), trainer.get_STAB(_type))
        gui.set_text(gui.get_node("move_attack_bonus/" .. name .. "/value"), trainer.get_move_type_attack_bonus(_type))
        gui.set_text(gui.get_node("pokemon_attack_bonus/" .. name .. "/value"), trainer.get_pokemon_type_attack_bonus_single(_type))
    end
    
    for _, attribute in pairs({"STR", "DEX", "CON", "INT", "WIS", "CHA"}) do
        gui.set_text(gui.get_node("attributes/" .. attribute), trainer.get_attribute(attribute))
    end

    local max_active_pokemon = storage.get_max_active_pokemon()
    local max_active_pokemon_range_low, max_active_pokemon_range_high = storage.get_max_active_pokemon_range()
    gui.set_text(gui.get_node("max_active_pokemon/value"), max_active_pokemon)
    gui.set_enabled(gui.get_node("max_active_pokemon/ctrl/btn_minus"), max_active_pokemon > max_active_pokemon_range_low)
    gui.set_enabled(gui.get_node("max_active_pokemon/ctrl/btn_plus"),  max_active_pokemon < max_active_pokemon_range_high)
end

local initial_scale = vmath.vector3(1, 1,0)
local function shake(node)
    gui.cancel_animation(node, "scale.x")
    gui.cancel_animation(node, "scale.y")
    gui.set_scale(node, initial_scale)
    local scale = gui.get_scale(node)
    gui.set_scale(node, scale * 1.2)
    gui.animate(node, "scale.x", scale.x, gui.EASING_OUTELASTIC, 0.8)
    gui.animate(node, "scale.y", scale.y, gui.EASING_OUTELASTIC, 0.8, 0.05, function()
        gui.set_scale(node, initial_scale)
    end)
end

local function activate_tab(self, tab_number)
    for i=1, #self.tabs do
        if tab_number == i then
            gui.play_flipbook(self.tabs[tab_number].tab, "common_down")
            gui.set_color(self.tabs[tab_number].text, gui_colors.BUTTON_TEXT_PRESSED)
            gui.set_enabled(self.tabs[tab_number].bg, true)
            shake(self.tabs[tab_number].tab)
        else
            gui.play_flipbook(self.tabs[i].tab, "common_up")
            gui.set_color(self.tabs[i].text, gui_colors.BUTTON_TEXT)
            gui.set_enabled(self.tabs[i].bg, false)
        end
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post(url.MENU, "show")
    local name = profiles.get_active_slot() ~= nil and profiles.get_active_name() or "Trainer"
    gui.set_text(gui.get_node("top_divider/title"), name)

    for name, _type in pairs(type_buttons) do
        gui.set_color(gui.get_node("type_master/" .. name .. "/title"), type_data[_type].color)
        gui.set_color(gui.get_node("stab/" .. name .. "/title"), type_data[_type].color)
        gui.set_color(gui.get_node("pokemon_attack_bonus/" .. name .. "/title"), type_data[_type].color)
        gui.set_color(gui.get_node("move_attack_bonus/" .. name .. "/title"), type_data[_type].color)
    end

    self.tabs = {
        [1] = {
            name = "tab_1",
            tab = gui.get_node("tab_1"),
            text = gui.get_node("text_1"),
            bg =gui.get_node("tab_1_content")
        },
        [2] = {
            name = "tab_2",
            tab = gui.get_node("tab_2"),
            text = gui.get_node("text_2"),
            bg =gui.get_node("tab_2_content")
        },
        [3] = {
            name = "tab_3",
            tab = gui.get_node("tab_3"),
            text = gui.get_node("text_3"),
            bg =gui.get_node("tab_3_content")
        },
        [4] = {
            name = "tab_4",
            tab = gui.get_node("tab_4"),
            text = gui.get_node("text_4"),
            bg =gui.get_node("tab_4_content")
        },
        [5] = {
            name = "tab_5",
            tab = gui.get_node("tab_5"),
            text = gui.get_node("text_5"),
            bg =gui.get_node("tab_5_content")
        },
        [6] = {
            name = "tab_6",
            tab = gui.get_node("tab_6"),
            text = gui.get_node("text_6"),
            bg =gui.get_node("tab_6_content")
        }
    }

    for i=1, #self.tabs do
        gui.set_position(self.tabs[i].bg, vmath.vector3(0, -140, 0))
        gui.set_enabled(self.tabs[i].bg, false)
    end
    activate_tab(self, 1)
    redraw()
end


local function redraw_wrap(fnc)
    fnc()
    redraw()
end


function on_input(self, action_id, action)
    for i=1, #self.tabs do
        local this_i = i
        gooey.button(self.tabs[this_i].name, action_id, action, function()
            activate_tab(self, this_i)
        end)
    end
    
    gooey.button("attack/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_attack_roll(trainer.get_attack_roll() - 1) end) end, gooey_buttons.minus_button)
    gooey.button("attack/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_attack_roll(trainer.get_attack_roll() + 1) end) end, gooey_buttons.plus_button)

    gooey.button("evolution_level/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_evolution_level(trainer.get_evolution_level() - 1) end) end, gooey_buttons.minus_button)
    gooey.button("evolution_level/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_evolution_level(trainer.get_evolution_level() + 1) end) end, gooey_buttons.plus_button)

    gooey.button("move/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_move(trainer.get_move() - 1) end) end, gooey_buttons.minus_button)
    gooey.button("move/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_move(trainer.get_move() + 1) end) end, gooey_buttons.plus_button)
    
    gooey.button("asi/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_asi(trainer.get_asi() - 1) end) end, gooey_buttons.minus_button)
    gooey.button("asi/btn_plus",  action_id, action, function() redraw_wrap(function() trainer.set_asi(trainer.get_asi() + 1) end) end, gooey_buttons.plus_button)

    gooey.button("STAB/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_all_levels_STAB(trainer.get_all_levels_STAB() - 1) end) end, gooey_buttons.minus_button)
    gooey.button("STAB/btn_plus", action_id, action, function()  redraw_wrap(function() trainer.set_all_levels_STAB(trainer.get_all_levels_STAB() + 1) end) end, gooey_buttons.plus_button)

    gooey.button("damage/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_damage(trainer.get_damage() - 1) end) end, gooey_buttons.minus_button)
    gooey.button("damage/btn_plus", action_id, action, function()  redraw_wrap(function() trainer.set_damage(trainer.get_damage() + 1) end) end, gooey_buttons.plus_button)

    for _, attribute in pairs({"STR", "DEX", "CON", "INT", "WIS", "CHA"}) do
        gooey.button("attributes/" .. attribute:lower() .. "/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_attribute(attribute, trainer.get_attribute(attribute) + 1) end) end, gooey_buttons.plus_button)
        gooey.button("attributes/" .. attribute:lower() .. "/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_attribute(attribute, trainer.get_attribute(attribute) - 1) end) end, gooey_buttons.minus_button)
    end
    
    for name, _type in pairs(type_buttons) do
        gooey.button("type_master/" .. name .. "/buttons/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_type_master_STAB(_type, trainer.get_type_master_STAB(_type) + 1) end) end, gooey_buttons.plus_button)
        gooey.button("type_master/" .. name .."/buttons/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_type_master_STAB(_type, trainer.get_type_master_STAB(_type) - 1) end) end, gooey_buttons.minus_button)
        
        gooey.button("pokemon_attack_bonus/" .. name .."/buttons/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_pokemon_type_attack_bonus(_type, trainer.get_pokemon_type_attack_bonus_single(_type) + 1) end) end, gooey_buttons.plus_button)
        gooey.button("pokemon_attack_bonus/" .. name .."/buttons/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_pokemon_type_attack_bonus(_type, trainer.get_pokemon_type_attack_bonus_single(_type) - 1) end) end, gooey_buttons.minus_button)

        gooey.button("move_attack_bonus/" .. name .."/buttons/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_move_type_attack_bonus(_type, trainer.get_move_type_attack_bonus(_type) + 1) end) end, gooey_buttons.plus_button)
        gooey.button("move_attack_bonus/" .. name .."/buttons/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_move_type_attack_bonus(_type, trainer.get_move_type_attack_bonus(_type) - 1) end) end, gooey_buttons.minus_button)
        
        gooey.button("stab/" .. name .. "/buttons/btn_plus", action_id, action, function() redraw_wrap(function() trainer.set_STAB(_type, trainer.get_STAB(_type) + 1) end) end, gooey_buttons.plus_button)
        gooey.button("stab/" .. name .."/buttons/btn_minus", action_id, action, function() redraw_wrap(function() trainer.set_STAB(_type, trainer.get_STAB(_type) - 1) end) end, gooey_buttons.minus_button)
        
    end

    gooey.button("max_active_pokemon/ctrl/btn_plus",  action_id, action, function() redraw_wrap(function() storage.set_max_active_pokemon(storage.get_max_active_pokemon() + 1) end) end, gooey_buttons.plus_button)
    gooey.button("max_active_pokemon/ctrl/btn_minus", action_id, action, function() redraw_wrap(function() storage.set_max_active_pokemon(storage.get_max_active_pokemon() - 1) end) end, gooey_buttons.minus_button)

end

function on_reload(self)
end
